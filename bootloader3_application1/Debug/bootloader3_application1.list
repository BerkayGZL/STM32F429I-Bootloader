
bootloader3_application1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da8  08003da8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000023c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002b4  200002b4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2a9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8b  00000000  00000000  0002c351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000810  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239de  00000000  00000000  0002f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa19  00000000  00000000  00052d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4de5  00000000  00000000  0005d7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00132594  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002614  00000000  00000000  001325e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003954 	.word	0x08003954

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08003954 	.word	0x08003954

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <bootloader_get_ver_cmd>:
#include "bootloader_command_app.h"

extern uint8_t supported_commands[];

void bootloader_get_ver_cmd(uint8_t *bl_rx_data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	uint8_t bl_Version = 0; // versiyon bilgisini tutmak için
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]

	printMessage("Bootloader: Bootloaer_Get_Ver_Cmd\n");
 80005a4:	481b      	ldr	r0, [pc, #108]	; (8000614 <bootloader_get_ver_cmd+0x7c>)
 80005a6:	f000 fae9 	bl	8000b7c <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1; // paket uzunlugu bulundu.(length to follow +1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]

	// Toplam paket uzunluğundan 4 çıkarılarak CRC başlangıc add bulundu
	uint32_t host_crc = *((uint32_t*)(bl_rx_data + command_packet_length - 4));
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3b04      	subs	r3, #4
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	613b      	str	r3, [r7, #16]

	// crc control yapıldı. crc=0 doğru, crc=1 yanlış,
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc))
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3b04      	subs	r3, #4
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	4619      	mov	r1, r3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 f9b6 	bl	8000938 <bootloader_verify_crc>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d117      	bne.n	8000602 <bootloader_get_ver_cmd+0x6a>
	{
		printMessage("Bootloader : Checksum success\n");
 80005d2:	4811      	ldr	r0, [pc, #68]	; (8000618 <bootloader_get_ver_cmd+0x80>)
 80005d4:	f000 fad2 	bl	8000b7c <printMessage>
		bootloader_send_ack(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f9e3 	bl	80009a4 <bootloader_send_ack>
		bl_Version = bootloader_get_version();
 80005de:	f000 fa0b 	bl	80009f8 <bootloader_get_version>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
		printMessage("Bootloader : BL_VER : %d %#x  \n", bl_Version, bl_Version); // Serial ekrana yazdırıldı.
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4619      	mov	r1, r3
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	461a      	mov	r2, r3
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <bootloader_get_ver_cmd+0x84>)
 80005f0:	f000 fac4 	bl	8000b7c <printMessage>
		bootloader_uart_write_data(&bl_Version, 1);
 80005f4:	f107 030f 	add.w	r3, r7, #15
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f988 	bl	8000910 <bootloader_uart_write_data>
	else
	{
		printMessage("Bootloader : Checksum fail \n");
		bootloader_send_nack();
	}
}
 8000600:	e004      	b.n	800060c <bootloader_get_ver_cmd+0x74>
		printMessage("Bootloader : Checksum fail \n");
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <bootloader_get_ver_cmd+0x88>)
 8000604:	f000 faba 	bl	8000b7c <printMessage>
		bootloader_send_nack();
 8000608:	f000 f9e4 	bl	80009d4 <bootloader_send_nack>
}
 800060c:	bf00      	nop
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	0800396c 	.word	0x0800396c
 8000618:	08003990 	.word	0x08003990
 800061c:	080039b0 	.word	0x080039b0
 8000620:	080039d0 	.word	0x080039d0

08000624 <bootloader_get_help_cmd>:

void bootloader_get_help_cmd (uint8_t *bl_rx_data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	printMessage("Bootloader: Bootloaer_Get_Help_Cmd\n");
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <bootloader_get_help_cmd+0x70>)
 800062e:	f000 faa5 	bl	8000b7c <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1; // paket uzunlugu bulundu.(length to follow +1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]

	// Toplam paket uzunluğundan 4 çıkarılarak CRC başlangıc add bulundu
	uint32_t host_crc = *((uint32_t*) (bl_rx_data + command_packet_length -4));
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3b04      	subs	r3, #4
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60bb      	str	r3, [r7, #8]

	// crc control yapıldı. crc=0 doğru, crc=1 yanlış,
	if (!bootloader_verify_crc(&bl_rx_data[0], command_packet_length-4, host_crc))
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3b04      	subs	r3, #4
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f972 	bl	8000938 <bootloader_verify_crc>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d113      	bne.n	8000682 <bootloader_get_help_cmd+0x5e>
	{
		printMessage("Bootloader: Checksum succes\n");
 800065a:	480f      	ldr	r0, [pc, #60]	; (8000698 <bootloader_get_help_cmd+0x74>)
 800065c:	f000 fa8e 	bl	8000b7c <printMessage>

		// ack değerini gönder ve 2. olarak da gelecek verinin uzunluğu gönderildi.
		bootloader_send_ack(strlen(supported_commands));
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <bootloader_get_help_cmd+0x78>)
 8000662:	f7ff fdc5 	bl	80001f0 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f99a 	bl	80009a4 <bootloader_send_ack>

		// supported command ve size kadar gönder.
		bootloader_uart_write_data(supported_commands, strlen(supported_commands));
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <bootloader_get_help_cmd+0x78>)
 8000672:	f7ff fdbd 	bl	80001f0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	4619      	mov	r1, r3
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <bootloader_get_help_cmd+0x78>)
 800067c:	f000 f948 	bl	8000910 <bootloader_uart_write_data>
	else
	{
		printMessage("Bootloader: Checksum fail\n");
		bootloader_send_nack();
	}
}
 8000680:	e004      	b.n	800068c <bootloader_get_help_cmd+0x68>
		printMessage("Bootloader: Checksum fail\n");
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <bootloader_get_help_cmd+0x7c>)
 8000684:	f000 fa7a 	bl	8000b7c <printMessage>
		bootloader_send_nack();
 8000688:	f000 f9a4 	bl	80009d4 <bootloader_send_nack>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	080039f0 	.word	0x080039f0
 8000698:	08003a14 	.word	0x08003a14
 800069c:	20000000 	.word	0x20000000
 80006a0:	08003a34 	.word	0x08003a34

080006a4 <bootloader_go_to_addr_cmd>:

void bootloader_go_to_addr_cmd(uint8_t *bl_rx_data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint32_t go_to_address = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
	uint8_t addr_valid = ADDR_VALID; 		// address geçerli
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_invalid = ADDR_INVALID; 	// address geçersiz
 80006b4:	2301      	movs	r3, #1
 80006b6:	73bb      	strb	r3, [r7, #14]

	printMessage("Bootloader : bootlodaer_go_to_addr_cmd \n");
 80006b8:	4827      	ldr	r0, [pc, #156]	; (8000758 <bootloader_go_to_addr_cmd+0xb4>)
 80006ba:	f000 fa5f 	bl	8000b7c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1; // paket uzunlugu bulundu.(length to follow +1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]

	// Toplam paket uzunluğundan 4 çıkarılarak CRC başlangıc add. bulundu
	uint32_t host_crc = *((uint32_t*)(bl_rx_data + command_packet_len - 4));
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	3b04      	subs	r3, #4
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	617b      	str	r3, [r7, #20]

	// crc control yapıldı. crc=0 doğru, crc=1 yanlış,
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	3b04      	subs	r3, #4
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f92c 	bl	8000938 <bootloader_verify_crc>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d12e      	bne.n	8000744 <bootloader_go_to_addr_cmd+0xa0>
	{
		printMessage("Bootloader : Checksum succes \n");
 80006e6:	481d      	ldr	r0, [pc, #116]	; (800075c <bootloader_go_to_addr_cmd+0xb8>)
 80006e8:	f000 fa48 	bl	8000b7c <printMessage>
		bootloader_send_ack(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 f959 	bl	80009a4 <bootloader_send_ack>

		// gelen memory address
		go_to_address = *((uint32_t*)&bl_rx_data[2]);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006f8:	61fb      	str	r3, [r7, #28]
		printMessage("Bootloader : GO Addr: %#x \n", go_to_address);
 80006fa:	69f9      	ldr	r1, [r7, #28]
 80006fc:	4818      	ldr	r0, [pc, #96]	; (8000760 <bootloader_go_to_addr_cmd+0xbc>)
 80006fe:	f000 fa3d 	bl	8000b7c <printMessage>

		//gelen address doğruysa yazmaya başla
		if(bootloader_verify_address(go_to_address) == ADDR_VALID)
 8000702:	69f8      	ldr	r0, [r7, #28]
 8000704:	f000 f980 	bl	8000a08 <bootloader_verify_address>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d110      	bne.n	8000730 <bootloader_go_to_addr_cmd+0x8c>
		{
			bootloader_uart_write_data(&addr_valid, 1);
 800070e:	f107 030f 	add.w	r3, r7, #15
 8000712:	2101      	movs	r1, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8fb 	bl	8000910 <bootloader_uart_write_data>

			go_to_address += 1; 		// T Bit = 1, 0x08008000 sondaki 0 => 1 yapıldı.
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3301      	adds	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]

			//atlama fonksiyonu
			void (*lets_go_to_address)(void) = (void*) go_to_address;
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	613b      	str	r3, [r7, #16]

			printMessage("Bootloader : Going to Address \n");
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <bootloader_go_to_addr_cmd+0xc0>)
 8000726:	f000 fa29 	bl	8000b7c <printMessage>

			lets_go_to_address();
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	4798      	blx	r3
	else
	{
		printMessage("Bootloader : Checksum fail \n");
		bootloader_send_nack();
	}
}
 800072e:	e00e      	b.n	800074e <bootloader_go_to_addr_cmd+0xaa>
			printMessage("Bootloader : Go Address Invalid \n");
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <bootloader_go_to_addr_cmd+0xc4>)
 8000732:	f000 fa23 	bl	8000b7c <printMessage>
			bootloader_uart_write_data(&addr_invalid, 1);
 8000736:	f107 030e 	add.w	r3, r7, #14
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f8e7 	bl	8000910 <bootloader_uart_write_data>
}
 8000742:	e004      	b.n	800074e <bootloader_go_to_addr_cmd+0xaa>
		printMessage("Bootloader : Checksum fail \n");
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <bootloader_go_to_addr_cmd+0xc8>)
 8000746:	f000 fa19 	bl	8000b7c <printMessage>
		bootloader_send_nack();
 800074a:	f000 f943 	bl	80009d4 <bootloader_send_nack>
}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08003a50 	.word	0x08003a50
 800075c:	08003a7c 	.word	0x08003a7c
 8000760:	08003a9c 	.word	0x08003a9c
 8000764:	08003ab8 	.word	0x08003ab8
 8000768:	08003ad8 	.word	0x08003ad8
 800076c:	080039d0 	.word	0x080039d0

08000770 <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(uint8_t *bl_rx_data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	uint8_t eraseStatus = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]

	printMessage("Bootloader : bootloader_flash_erase_cmd \n");
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <bootloader_flash_erase_cmd+0xa0>)
 800077e:	f000 f9fd 	bl	8000b7c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1; // paket uzunlugu bulundu.(length to follow +1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	617b      	str	r3, [r7, #20]

	// Toplam paket uzunluğundan 4 çıkarılarak CRC başlangıc add. bulundu
	uint32_t host_crc = *((uint32_t*)(bl_rx_data + command_packet_len - 4));
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3b04      	subs	r3, #4
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	613b      	str	r3, [r7, #16]

	// crc control yapıldı. crc=0 doğru, crc=1 yanlış,
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3b04      	subs	r3, #4
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	4619      	mov	r1, r3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f8ca 	bl	8000938 <bootloader_verify_crc>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d128      	bne.n	80007fc <bootloader_flash_erase_cmd+0x8c>
	{
		printMessage("Bootloader : Checksum success \n");
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <bootloader_flash_erase_cmd+0xa4>)
 80007ac:	f000 f9e6 	bl	8000b7c <printMessage>
		bootloader_send_ack(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f8f7 	bl	80009a4 <bootloader_send_ack>
		printMessage("Bootloader : Initial Sector: %d Nubmer Of Secotrs: %d \n", bl_rx_data[2], bl_rx_data[3]);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3302      	adds	r3, #2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3303      	adds	r3, #3
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4814      	ldr	r0, [pc, #80]	; (8000818 <bootloader_flash_erase_cmd+0xa8>)
 80007c8:	f000 f9d8 	bl	8000b7c <printMessage>

		// execute_flash_erase de silinmesi gereken sektör ve sektör numarası verilir.
		eraseStatus = execute_flash_erase(bl_rx_data[2], bl_rx_data[3]);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3302      	adds	r3, #2
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3303      	adds	r3, #3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4610      	mov	r0, r2
 80007dc:	f000 f950 	bl	8000a80 <execute_flash_erase>
 80007e0:	4603      	mov	r3, r0
 80007e2:	73fb      	strb	r3, [r7, #15]

		printMessage("Bootloader : Flash Erase Status : %d \n", eraseStatus);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <bootloader_flash_erase_cmd+0xac>)
 80007ea:	f000 f9c7 	bl	8000b7c <printMessage>
		bootloader_uart_write_data(&eraseStatus, 1);
 80007ee:	f107 030f 	add.w	r3, r7, #15
 80007f2:	2101      	movs	r1, #1
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f88b 	bl	8000910 <bootloader_uart_write_data>
	else
	{
		printMessage("Bootloader : Checksum fail \n");
		bootloader_send_nack();
	}
}
 80007fa:	e004      	b.n	8000806 <bootloader_flash_erase_cmd+0x96>
		printMessage("Bootloader : Checksum fail \n");
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <bootloader_flash_erase_cmd+0xb0>)
 80007fe:	f000 f9bd 	bl	8000b7c <printMessage>
		bootloader_send_nack();
 8000802:	f000 f8e7 	bl	80009d4 <bootloader_send_nack>
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08003afc 	.word	0x08003afc
 8000814:	08003b28 	.word	0x08003b28
 8000818:	08003b48 	.word	0x08003b48
 800081c:	08003b80 	.word	0x08003b80
 8000820:	080039d0 	.word	0x080039d0

08000824 <bootloader_mem_write_cmd>:

void bootloader_mem_write_cmd(uint8_t* bl_rx_data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	uint8_t addrValid = ADDR_VALID; // doğru adrese yazılıyor mu?
 800082c:	2300      	movs	r3, #0
 800082e:	77fb      	strb	r3, [r7, #31]
	uint8_t writeStatus = 0x00; // Yazma durumu
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
	uint8_t checkSum = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	77bb      	strb	r3, [r7, #30]
	uint8_t length = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	777b      	strb	r3, [r7, #29]

	length = bl_rx_data[0]; // lengt to follow değeri atandı.
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	777b      	strb	r3, [r7, #29]

	uint8_t payloadLength = bl_rx_data[6]; // 6. index yük uzunlugu olacak
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	799b      	ldrb	r3, [r3, #6]
 8000846:	773b      	strb	r3, [r7, #28]

	uint32_t memAddress = *((uint32_t *) (&bl_rx_data[2])); // gelen datanın 2. adresten başlayacak.
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800084e:	61bb      	str	r3, [r7, #24]

	checkSum = bl_rx_data[length]; // gelen data uzunlugu kadar olacak
 8000850:	7f7b      	ldrb	r3, [r7, #29]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	77bb      	strb	r3, [r7, #30]

	printMessage("Bootloader : bootloader_mem_write_cmd \n");
 800085a:	4827      	ldr	r0, [pc, #156]	; (80008f8 <bootloader_mem_write_cmd+0xd4>)
 800085c:	f000 f98e 	bl	8000b7c <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1; // paket uzunlugu bulundu.(length to follow +1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]

	// Toplam paket uzunluğundan 4 çıkarılarak CRC başlangıc add. bulundu
	uint32_t host_crc = *((uint32_t*)(bl_rx_data + command_packet_len - 4));
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3b04      	subs	r3, #4
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	613b      	str	r3, [r7, #16]

	// crc control yapıldı. crc=0 doğru, crc=1 yanlış,
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3b04      	subs	r3, #4
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4619      	mov	r1, r3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f85b 	bl	8000938 <bootloader_verify_crc>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d12e      	bne.n	80008e6 <bootloader_mem_write_cmd+0xc2>
	{
		printMessage("Bootloader : Checksum success \n");
 8000888:	481c      	ldr	r0, [pc, #112]	; (80008fc <bootloader_mem_write_cmd+0xd8>)
 800088a:	f000 f977 	bl	8000b7c <printMessage>
		bootloader_send_ack(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f888 	bl	80009a4 <bootloader_send_ack>

		printMessage("Bootloader : Memory Write Address: %#x \n", memAddress);
 8000894:	69b9      	ldr	r1, [r7, #24]
 8000896:	481a      	ldr	r0, [pc, #104]	; (8000900 <bootloader_mem_write_cmd+0xdc>)
 8000898:	f000 f970 	bl	8000b7c <printMessage>

		// Memory address doğrulaması
		if(bootloader_verify_address(memAddress) == ADDR_VALID)
 800089c:	69b8      	ldr	r0, [r7, #24]
 800089e:	f000 f8b3 	bl	8000a08 <bootloader_verify_address>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d112      	bne.n	80008ce <bootloader_mem_write_cmd+0xaa>
		{
			printMessage("Bootloader : Valid Memory Write Address \n");
 80008a8:	4816      	ldr	r0, [pc, #88]	; (8000904 <bootloader_mem_write_cmd+0xe0>)
 80008aa:	f000 f967 	bl	8000b7c <printMessage>

			writeStatus = execute_memory_write(&bl_rx_data[7], memAddress, payloadLength);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3307      	adds	r3, #7
 80008b2:	7f3a      	ldrb	r2, [r7, #28]
 80008b4:	69b9      	ldr	r1, [r7, #24]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f936 	bl	8000b28 <execute_memory_write>
 80008bc:	4603      	mov	r3, r0
 80008be:	73fb      	strb	r3, [r7, #15]

			bootloader_uart_write_data(&writeStatus, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f822 	bl	8000910 <bootloader_uart_write_data>
	else
	{
		printMessage("Bootloader : Checksum fail \n");
		bootloader_send_nack();
	}
}
 80008cc:	e010      	b.n	80008f0 <bootloader_mem_write_cmd+0xcc>
			printMessage("Bootloader : Invalid Memory Write Address \n");
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <bootloader_mem_write_cmd+0xe4>)
 80008d0:	f000 f954 	bl	8000b7c <printMessage>
			writeStatus = ADDR_INVALID;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&writeStatus, 1);
 80008d8:	f107 030f 	add.w	r3, r7, #15
 80008dc:	2101      	movs	r1, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f816 	bl	8000910 <bootloader_uart_write_data>
}
 80008e4:	e004      	b.n	80008f0 <bootloader_mem_write_cmd+0xcc>
		printMessage("Bootloader : Checksum fail \n");
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <bootloader_mem_write_cmd+0xe8>)
 80008e8:	f000 f948 	bl	8000b7c <printMessage>
		bootloader_send_nack();
 80008ec:	f000 f872 	bl	80009d4 <bootloader_send_nack>
}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08003ba8 	.word	0x08003ba8
 80008fc:	08003b28 	.word	0x08003b28
 8000900:	08003bd0 	.word	0x08003bd0
 8000904:	08003bfc 	.word	0x08003bfc
 8000908:	08003c28 	.word	0x08003c28
 800090c:	080039d0 	.word	0x080039d0

08000910 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *Buffer, uint32_t len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, Buffer, len, HAL_MAX_DELAY);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b29a      	uxth	r2, r3
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <bootloader_uart_write_data+0x24>)
 8000926:	f002 f84a 	bl	80029be <HAL_UART_Transmit>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200001ac 	.word	0x200001ac

08000938 <bootloader_verify_crc>:

//CRC_SUCCESS = 0, CRC_FAIL=1
uint8_t bootloader_verify_crc(uint8_t *Buffer, uint32_t len, uint32_t crcHost)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t crcValue = 0xFF; 	//crc degerleri atanması için
 8000944:	23ff      	movs	r3, #255	; 0xff
 8000946:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;			//Buffer daki elemanları içine alınacak
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

	for(uint32_t i = 0; i < len; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	e00f      	b.n	8000972 <bootloader_verify_crc+0x3a>
	{
			data = Buffer[i];
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	617b      	str	r3, [r7, #20]

			// data da bulunan degerler crcValue ye tek tek eklenir
			crcValue = HAL_CRC_Accumulate(&hcrc, &data, 1);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2201      	movs	r2, #1
 8000962:	4619      	mov	r1, r3
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <bootloader_verify_crc+0x68>)
 8000966:	f000 fe86 	bl	8001676 <HAL_CRC_Accumulate>
 800096a:	61f8      	str	r0, [r7, #28]
	for(uint32_t i = 0; i < len; i++)
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	3301      	adds	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3eb      	bcc.n	8000952 <bootloader_verify_crc+0x1a>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <bootloader_verify_crc+0x68>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <bootloader_verify_crc+0x68>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0201 	orr.w	r2, r2, #1
 8000988:	609a      	str	r2, [r3, #8]

	if(crcValue == crcHost) // crcHost gelen crc ile benim doldurduğum crc karşılaştırıldı.
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	d101      	bne.n	8000996 <bootloader_verify_crc+0x5e>
	{
		return CRC_SUCCESS;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <bootloader_verify_crc+0x60>
	}

	return CRC_FAIL;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200001f0 	.word	0x200001f0

080009a4 <bootloader_send_ack>:


//crc bilgisi doğru ise ack degerini pc ye gönder. ack bilgisi 2 byte gönderilir.
void bootloader_send_ack(uint8_t followLength)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	uint8_t ackBuffer[2];
	ackBuffer[0] = BL_ACK_VALUE; //  0xA5 tanımlanıp gönderildi. Başarılı.
 80009ae:	23a5      	movs	r3, #165	; 0xa5
 80009b0:	733b      	strb	r3, [r7, #12]
	ackBuffer[1] = followLength;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart3, ackBuffer, 2, HAL_MAX_DELAY);
 80009b6:	f107 010c 	add.w	r1, r7, #12
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2202      	movs	r2, #2
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <bootloader_send_ack+0x2c>)
 80009c2:	f001 fffc 	bl	80029be <HAL_UART_Transmit>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001ac 	.word	0x200001ac

080009d4 <bootloader_send_nack>:

//crc bilgisi yanlış ise nack gönder. nack bilgisi 1 byte gönderilir.
void bootloader_send_nack()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	uint8_t nackValue = BL_NACK_VALUE; //0x7F tanımlanıp gönderildi. Başarısız.
 80009da:	237f      	movs	r3, #127	; 0x7f
 80009dc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nackValue, 1, HAL_MAX_DELAY);
 80009de:	1df9      	adds	r1, r7, #7
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	2201      	movs	r2, #1
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <bootloader_send_nack+0x20>)
 80009e8:	f001 ffe9 	bl	80029be <HAL_UART_Transmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200001ac 	.word	0x200001ac

080009f8 <bootloader_get_version>:

uint8_t bootloader_get_version(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	return BL_VER;
 80009fc:	2310      	movs	r3, #16
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <bootloader_verify_address>:


uint8_t bootloader_verify_address(uint32_t goAddress)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	// sector 0 ile 11 arasında kontrolü yapıldı.
	if(goAddress >= FLASH_BASE && goAddress <= FLASH_END)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a16:	d305      	bcc.n	8000a24 <bootloader_verify_address+0x1c>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000a1e:	d201      	bcs.n	8000a24 <bootloader_verify_address+0x1c>
		return ADDR_VALID;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e01e      	b.n	8000a62 <bootloader_verify_address+0x5a>
	else if(goAddress >= SRAM1_BASE && goAddress <= SRAM1_END)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d305      	bcc.n	8000a38 <bootloader_verify_address+0x30>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <bootloader_verify_address+0x68>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d801      	bhi.n	8000a38 <bootloader_verify_address+0x30>
		return ADDR_VALID;
 8000a34:	2300      	movs	r3, #0
 8000a36:	e014      	b.n	8000a62 <bootloader_verify_address+0x5a>
	else if(goAddress >= SRAM2_BASE && goAddress <= SRAM2_END)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <bootloader_verify_address+0x68>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d305      	bcc.n	8000a4c <bootloader_verify_address+0x44>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <bootloader_verify_address+0x6c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d801      	bhi.n	8000a4c <bootloader_verify_address+0x44>
		return ADDR_VALID;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e00a      	b.n	8000a62 <bootloader_verify_address+0x5a>
	else if(goAddress >= BKPSRAM_BASE && goAddress <= BKPSRAM_END)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <bootloader_verify_address+0x70>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d305      	bcc.n	8000a60 <bootloader_verify_address+0x58>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <bootloader_verify_address+0x74>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d801      	bhi.n	8000a60 <bootloader_verify_address+0x58>
		return ADDR_VALID;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e000      	b.n	8000a62 <bootloader_verify_address+0x5a>
	else
		return ADDR_INVALID;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2001c000 	.word	0x2001c000
 8000a74:	20020000 	.word	0x20020000
 8000a78:	40024000 	.word	0x40024000
 8000a7c:	40025000 	.word	0x40025000

08000a80 <execute_flash_erase>:

// execute_flash_erase de silinmesi gereken sektör ve sektör numarası verilir.
uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSector)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef FlashEraseInitStruct = {0}; // içerisinde belli değerler vardır. ilk 0 verildi.
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
	uint32_t SectorError = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status = {0}; // status içinde ok-error-busy-timeout vardır. ilk 0 verdik.
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// toplam 11 sector old için fazlası kabul edilmez
	if(numberOfSector > 11)
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	2b0b      	cmp	r3, #11
 8000aae:	d901      	bls.n	8000ab4 <execute_flash_erase+0x34>
		return INVALID_SECTOR; //0x04 olarak dönülür.
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	e035      	b.n	8000b20 <execute_flash_erase+0xa0>

	if((sectorNumber <= 11) || (sectorNumber == 0xFF))
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b0b      	cmp	r3, #11
 8000ab8:	d902      	bls.n	8000ac0 <execute_flash_erase+0x40>
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2bff      	cmp	r3, #255	; 0xff
 8000abe:	d12e      	bne.n	8000b1e <execute_flash_erase+0x9e>
	{
		if(sectorNumber == 0xFF) //0xFF girilirse komple sil
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d102      	bne.n	8000acc <execute_flash_erase+0x4c>
		{
			FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	e012      	b.n	8000af2 <execute_flash_erase+0x72>
		}
		else
		{
			// ornegin sector number 8 ise 11-8 = 3, 3 adet sektor silinmeli
			uint8_t remainingSector = 11 - sectorNumber;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f1c3 030b 	rsb	r3, r3, #11
 8000ad2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			if(sectorNumber > remainingSector)
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d902      	bls.n	8000ae6 <execute_flash_erase+0x66>
				sectorNumber = remainingSector; // kac adet sektör silinmesi gerekiyor o hesaplandı.
 8000ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ae4:	71fb      	strb	r3, [r7, #7]

		FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // sector sector silme
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
		FlashEraseInitStruct.Sector = sectorNumber; //sectorNumber sectorleri silinecek
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	61bb      	str	r3, [r7, #24]
		FlashEraseInitStruct.NbSectors = numberOfSector;// number of sector kadar silinecek
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	61fb      	str	r3, [r7, #28]
		}
		FlashEraseInitStruct.Banks = FLASH_BANK_1;//bank seçimi yapıldı.
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]

		HAL_FLASH_Unlock(); // flash kilidi açıldı
 8000af6:	f000 fe3d 	bl	8001774 <HAL_FLASH_Unlock>
		FlashEraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; // voltaj aralığı 2.6-3.7 alındı.
 8000afa:	2302      	movs	r3, #2
 8000afc:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&FlashEraseInitStruct, &SectorError);
 8000afe:	f107 020c 	add.w	r2, r7, #12
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 ffa5 	bl	8001a58 <HAL_FLASHEx_Erase>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_FLASH_Lock(); // flash kilitlendi.
 8000b14:	f000 fe50 	bl	80017b8 <HAL_FLASH_Lock>

		return status;
 8000b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b1c:	e000      	b.n	8000b20 <execute_flash_erase+0xa0>
	}

	return INVALID_SECTOR;
 8000b1e:	2304      	movs	r3, #4
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <execute_memory_write>:

// buffer içeriğini hafızaya yazar
uint8_t execute_memory_write(uint8_t *Buffer, uint32_t memAddress, uint32_t len) // 255 byte taşıyabilir.
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	uint8_t status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Unlock();		// flash kilidi ac
 8000b38:	f000 fe1c 	bl	8001774 <HAL_FLASH_Unlock>


	//buffer da bulunan değerleri uzunluk kadar yazmak için kullanıldı.
	for(uint32_t i = 0 ; i <len ; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	e011      	b.n	8000b66 <execute_memory_write+0x3e>
	{
		//Gelen veri byte byte status yazıldı. 8 bit olarak yazıldı. memAddress+i 0x08008000+1
		// HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, memAddress+i, Buffer[i]) memory yazma tamamlandı
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, memAddress+i, Buffer[i]);
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	18d1      	adds	r1, r2, r3
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	f04f 0300 	mov.w	r3, #0
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 fdb8 	bl	80016cc <HAL_FLASH_Program>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i = 0 ; i <len ; i++)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	3301      	adds	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3e9      	bcc.n	8000b42 <execute_memory_write+0x1a>
	}

	HAL_FLASH_Lock(); // flash kilitle
 8000b6e:	f000 fe23 	bl	80017b8 <HAL_FLASH_Lock>

	return status;
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <printMessage>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printMessage(char *format, ...)
{
 8000b7c:	b40f      	push	{r0, r1, r2, r3}
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b09a      	sub	sp, #104	; 0x68
 8000b82:	af00      	add	r7, sp, #0
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
 8000b84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b88:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 fac7 	bl	8003124 <vsiprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)comingMessage, strlen(comingMessage), HAL_MAX_DELAY);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb29 	bl	80001f0 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	1d39      	adds	r1, r7, #4
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <printMessage+0x40>)
 8000baa:	f001 ff08 	bl	80029be <HAL_UART_Transmit>
	va_end(vaList);
}
 8000bae:	bf00      	nop
 8000bb0:	3768      	adds	r7, #104	; 0x68
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr
 8000bbc:	200001f8 	.word	0x200001f8

08000bc0 <bootloader_uart_data_read>:
void bootloader_uart_data_read(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	uint8_t bl_rx_length = 0; // gelen data uzunluğu alınması için
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 8000bca:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8000bce:	2100      	movs	r1, #0
 8000bd0:	481f      	ldr	r0, [pc, #124]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000bd2:	f002 fa89 	bl	80030e8 <memset>

		// Pc'den ilk gelen byte length to follow old için size of 1 yazıldı.
		HAL_UART_Receive(&huart3, bootloader_rx_data, 1, HAL_MAX_DELAY);
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	2201      	movs	r2, #1
 8000bdc:	491c      	ldr	r1, [pc, #112]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000bde:	481d      	ldr	r0, [pc, #116]	; (8000c54 <bootloader_uart_data_read+0x94>)
 8000be0:	f001 ff7f 	bl	8002ae2 <HAL_UART_Receive>

		bl_rx_length = bootloader_rx_data[0];// gelecek verinin uzunluğu öğrenildi.
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	71fb      	strb	r3, [r7, #7]

		// Pc'den gelen byte da length to follow değeri çıkarıldı. Command code ögrenildi. ...data[1] oldu.
		HAL_UART_Receive(&huart3, &bootloader_rx_data[1], bl_rx_length, HAL_MAX_DELAY);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	4919      	ldr	r1, [pc, #100]	; (8000c58 <bootloader_uart_data_read+0x98>)
 8000bf4:	4817      	ldr	r0, [pc, #92]	; (8000c54 <bootloader_uart_data_read+0x94>)
 8000bf6:	f001 ff74 	bl	8002ae2 <HAL_UART_Receive>

		switch(bootloader_rx_data[1]) //command koda göre case gir.
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000bfc:	785b      	ldrb	r3, [r3, #1]
 8000bfe:	3b51      	subs	r3, #81	; 0x51
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	d823      	bhi.n	8000c4c <bootloader_uart_data_read+0x8c>
 8000c04:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <bootloader_uart_data_read+0x4c>)
 8000c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0a:	bf00      	nop
 8000c0c:	08000c29 	.word	0x08000c29
 8000c10:	08000c31 	.word	0x08000c31
 8000c14:	08000c4d 	.word	0x08000c4d
 8000c18:	08000c4d 	.word	0x08000c4d
 8000c1c:	08000c37 	.word	0x08000c37
 8000c20:	08000c3d 	.word	0x08000c3d
 8000c24:	08000c45 	.word	0x08000c45
		{
			case BL_GET_VER:
				bootloader_get_ver_cmd(bootloader_rx_data);
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000c2a:	f7ff fcb5 	bl	8000598 <bootloader_get_ver_cmd>
			break;
 8000c2e:	e00e      	b.n	8000c4e <bootloader_uart_data_read+0x8e>
			case BL_GET_HELP:
				bootloader_get_help_cmd(bootloader_rx_data);
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000c32:	f7ff fcf7 	bl	8000624 <bootloader_get_help_cmd>
			case BL_GO_TO_ADDR:
				bootloader_go_to_addr_cmd(bootloader_rx_data);
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000c38:	f7ff fd34 	bl	80006a4 <bootloader_go_to_addr_cmd>
			case BL_FLASH_ERASE:
				bootloader_flash_erase_cmd(bootloader_rx_data);
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000c3e:	f7ff fd97 	bl	8000770 <bootloader_flash_erase_cmd>
			break;
 8000c42:	e004      	b.n	8000c4e <bootloader_uart_data_read+0x8e>
			case BL_MEM_WRITE:
				bootloader_mem_write_cmd(bootloader_rx_data);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <bootloader_uart_data_read+0x90>)
 8000c46:	f7ff fded 	bl	8000824 <bootloader_mem_write_cmd>
				break;
 8000c4a:	e000      	b.n	8000c4e <bootloader_uart_data_read+0x8e>
			default:
				break;
 8000c4c:	bf00      	nop
		memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 8000c4e:	e7bc      	b.n	8000bca <bootloader_uart_data_read+0xa>
 8000c50:	200000a0 	.word	0x200000a0
 8000c54:	200001ac 	.word	0x200001ac
 8000c58:	200000a1 	.word	0x200000a1

08000c5c <bootloader_jump_to_user_application>:
		}
	}

}
void bootloader_jump_to_user_application(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
	// 1- Sifirlama isleyicisinin adresini tutan bir fonksiyon göstericisi
		void (*bootloader_application_reset_handler)(void);
		// 2- Kullanici uygulamasina atlama kodu çagrildi
		printMessage("Bootloader : Called bootloader_jump_to_user_application() \n");
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <bootloader_jump_to_user_application+0x38>)
 8000c64:	f7ff ff8a 	bl	8000b7c <printMessage>
		// 3- MSP'nin degerini tut
		uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <bootloader_jump_to_user_application+0x3c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
		printMessage("Bootloader : MSP Value: %#x \n", mspValue);
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <bootloader_jump_to_user_application+0x40>)
 8000c72:	f7ff ff83 	bl	8000b7c <printMessage>
		//__set_MSP(mspValue);
		// 4- Sifirlama isleyicisinin degerini tut, MSP + 4 = reset handler
		uint32_t resetValue = *(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <bootloader_jump_to_user_application+0x44>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	60bb      	str	r3, [r7, #8]
		printMessage("Bootloader : Reset Value: %#x \n", resetValue);
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <bootloader_jump_to_user_application+0x48>)
 8000c80:	f7ff ff7c 	bl	8000b7c <printMessage>
		// 5- Sifirlama isleyicisi ile bir islev baslat
		bootloader_application_reset_handler = (void*) resetValue;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	607b      	str	r3, [r7, #4]
		// 6- Sifirlama isleyicisini çagir ve kullanici uygulamasina atla
		bootloader_application_reset_handler();
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4798      	blx	r3

	}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08003c54 	.word	0x08003c54
 8000c98:	08008000 	.word	0x08008000
 8000c9c:	08003c90 	.word	0x08003c90
 8000ca0:	08008004 	.word	0x08008004
 8000ca4:	08003cb0 	.word	0x08003cb0

08000ca8 <bootloader_jump_to_user_application2>:

void bootloader_jump_to_user_application2(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	// 1- Sifirlama isleyicisinin adresini tutan bir fonksiyon göstericisi
		void (*bootloader_application_reset_handler)(void);
		// 2- Kullanici uygulamasina atlama kodu çagrildi
		printMessage("Bootloader : Called bootloader_jump_to_user_application() \n");
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <bootloader_jump_to_user_application2+0x38>)
 8000cb0:	f7ff ff64 	bl	8000b7c <printMessage>
		// 3- MSP'nin degerini tut
		uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS2;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <bootloader_jump_to_user_application2+0x3c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
		printMessage("Bootloader : MSP Value: %#x \n", mspValue);
 8000cba:	68f9      	ldr	r1, [r7, #12]
 8000cbc:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <bootloader_jump_to_user_application2+0x40>)
 8000cbe:	f7ff ff5d 	bl	8000b7c <printMessage>
		//__set_MSP(mspValue);
		// 4- Sifirlama isleyicisinin degerini tut, MSP + 4 = reset handler
		uint32_t resetValue = *(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS2 + 4);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <bootloader_jump_to_user_application2+0x44>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60bb      	str	r3, [r7, #8]
		printMessage("Bootloader : Reset Value: %#x \n", resetValue);
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <bootloader_jump_to_user_application2+0x48>)
 8000ccc:	f7ff ff56 	bl	8000b7c <printMessage>
		// 5- Sifirlama isleyicisi ile bir islev baslat
		bootloader_application_reset_handler = (void*) resetValue;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	607b      	str	r3, [r7, #4]
		// 6- Sifirlama isleyicisini çagir ve kullanici uygulamasina atla
		bootloader_application_reset_handler();
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4798      	blx	r3

	}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	08003c54 	.word	0x08003c54
 8000ce4:	08040000 	.word	0x08040000
 8000ce8:	08003c90 	.word	0x08003c90
 8000cec:	08040004 	.word	0x08040004
 8000cf0:	08003cb0 	.word	0x08003cb0

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fb26 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f832 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 f922 	bl	8000f48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d04:	f000 f8a2 	bl	8000e4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d08:	f000 f8ca 	bl	8000ea0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d0c:	f000 f8f2 	bl	8000ef4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000d10:	f000 f888 	bl	8000e24 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14,1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <main+0x60>)
 8000d1c:	f001 f9a0 	bl	8002060 <HAL_GPIO_WritePin>


	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000d20:	2101      	movs	r1, #1
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <main+0x64>)
 8000d24:	f001 f984 	bl	8002030 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d105      	bne.n	8000d3a <main+0x46>
	  {
		  printMessage("Bootloader : Button is pressed and going to bootloader mode.\n");
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <main+0x68>)
 8000d30:	f7ff ff24 	bl	8000b7c <printMessage>

		  bootloader_uart_data_read();
 8000d34:	f7ff ff44 	bl	8000bc0 <bootloader_uart_data_read>
 8000d38:	e00a      	b.n	8000d50 <main+0x5c>
	  }
	  else
	  {
		  printMessage("Bootloader : Button is not pressed and executing user application.\n");
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <main+0x6c>)
 8000d3c:	f7ff ff1e 	bl	8000b7c <printMessage>
		  HAL_Delay(3000);
 8000d40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d44:	f000 fb72 	bl	800142c <HAL_Delay>
		  bootloader_jump_to_user_application();
 8000d48:	f7ff ff88 	bl	8000c5c <bootloader_jump_to_user_application>
		  bootloader_jump_to_user_application2();
 8000d4c:	f7ff ffac 	bl	8000ca8 <bootloader_jump_to_user_application2>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <main+0x5c>
 8000d52:	bf00      	nop
 8000d54:	40021800 	.word	0x40021800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	08003cd0 	.word	0x08003cd0
 8000d60:	08003d10 	.word	0x08003d10

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	; 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 f9b8 	bl	80030e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <SystemClock_Config+0xb8>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <SystemClock_Config+0xb8>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <SystemClock_Config+0xb8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <SystemClock_Config+0xbc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <SystemClock_Config+0xbc>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <SystemClock_Config+0xbc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 f95b 	bl	8002094 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000de4:	f000 f910 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fbbe 	bl	8002584 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e0e:	f000 f8fb 	bl	8001008 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_CRC_Init+0x20>)
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <MX_CRC_Init+0x24>)
 8000e2c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_CRC_Init+0x20>)
 8000e30:	f000 fc05 	bl	800163e <HAL_CRC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e3a:	f000 f8e5 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001f0 	.word	0x200001f0
 8000e48:	40023000 	.word	0x40023000

08000e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_USART1_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e84:	f001 fd4e 	bl	8002924 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f000 f8bb 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001f8 	.word	0x200001f8
 8000e9c:	40011000 	.word	0x40011000

08000ea0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_USART2_UART_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f001 fd24 	bl	8002924 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f000 f891 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000023c 	.word	0x2000023c
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART3_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f2c:	f001 fcfa 	bl	8002924 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f867 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001ac 	.word	0x200001ac
 8000f44:	40004800 	.word	0x40004800

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fb8:	4811      	ldr	r0, [pc, #68]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000fba:	f001 f851 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_GPIO_Init+0xbc>)
 8000fd2:	f000 fe81 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000fd6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000ff0:	f000 fe72 	bl	8001cd8 <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40021800 	.word	0x40021800
 8001004:	40020000 	.word	0x40020000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_CRC_MspInit+0x3c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10d      	bne.n	8001092 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_CRC_MspInit+0x40>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_CRC_MspInit+0x40>)
 8001080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_CRC_MspInit+0x40>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023000 	.word	0x40023000
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a4c      	ldr	r2, [pc, #304]	; (80011f8 <HAL_UART_MspInit+0x150>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12d      	bne.n	8001126 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <HAL_UART_MspInit+0x154>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a4a      	ldr	r2, [pc, #296]	; (80011fc <HAL_UART_MspInit+0x154>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b48      	ldr	r3, [pc, #288]	; (80011fc <HAL_UART_MspInit+0x154>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HAL_UART_MspInit+0x154>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a43      	ldr	r2, [pc, #268]	; (80011fc <HAL_UART_MspInit+0x154>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <HAL_UART_MspInit+0x154>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001102:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4838      	ldr	r0, [pc, #224]	; (8001200 <HAL_UART_MspInit+0x158>)
 8001120:	f000 fdda 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001124:	e063      	b.n	80011ee <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a36      	ldr	r2, [pc, #216]	; (8001204 <HAL_UART_MspInit+0x15c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d12c      	bne.n	800118a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_UART_MspInit+0x154>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a30      	ldr	r2, [pc, #192]	; (80011fc <HAL_UART_MspInit+0x154>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_UART_MspInit+0x154>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_UART_MspInit+0x154>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a29      	ldr	r2, [pc, #164]	; (80011fc <HAL_UART_MspInit+0x154>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_UART_MspInit+0x154>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001168:	230c      	movs	r3, #12
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <HAL_UART_MspInit+0x158>)
 8001184:	f000 fda8 	bl	8001cd8 <HAL_GPIO_Init>
}
 8001188:	e031      	b.n	80011ee <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_UART_MspInit+0x160>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d12c      	bne.n	80011ee <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_UART_MspInit+0x154>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_UART_MspInit+0x154>)
 800119e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x154>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_UART_MspInit+0x154>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_UART_MspInit+0x154>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_UART_MspInit+0x154>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011de:	2307      	movs	r3, #7
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <HAL_UART_MspInit+0x164>)
 80011ea:	f000 fd75 	bl	8001cd8 <HAL_GPIO_Init>
}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	; 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000
 8001204:	40004400 	.word	0x40004400
 8001208:	40004800 	.word	0x40004800
 800120c:	40020400 	.word	0x40020400

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8c6 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f001 fefe 	bl	8003094 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20030000 	.word	0x20030000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	20000094 	.word	0x20000094
 80012cc:	200002b8 	.word	0x200002b8

080012d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800131e:	f7ff ffd7 	bl	80012d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f001 febd 	bl	80030a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff fce5 	bl	8000cf4 <main>
  bx  lr    
 800132a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800132c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001338:	08003db0 	.word	0x08003db0
  ldr r2, =_sbss
 800133c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001340:	200002b4 	.word	0x200002b4

08001344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_Init+0x40>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_Init+0x40>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x40>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f931 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fe4a 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f93b 	bl	8001626 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f911 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000010 	.word	0x20000010
 80013e8:	2000000c 	.word	0x2000000c

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000010 	.word	0x20000010
 8001410:	20000280 	.word	0x20000280

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000280 	.word	0x20000280

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000010 	.word	0x20000010

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff47 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff5c 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffb0 	bl	8001594 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e00e      	b.n	800166e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	795b      	ldrb	r3, [r3, #5]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fcff 	bl	8001064 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001676:	b480      	push	{r7}
 8001678:	b087      	sub	sp, #28
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2202      	movs	r2, #2
 800168a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	441a      	add	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3f0      	bcc.n	8001692 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80016be:	693b      	ldr	r3, [r7, #16]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_FLASH_Program+0xa0>)
 80016e0:	7e1b      	ldrb	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_FLASH_Program+0x1e>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e03b      	b.n	8001762 <HAL_FLASH_Program+0x96>
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_FLASH_Program+0xa0>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016f4:	f000 f870 	bl	80017d8 <FLASH_WaitForLastOperation>
 80016f8:	4603      	mov	r3, r0
 80016fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12b      	bne.n	800175a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001708:	783b      	ldrb	r3, [r7, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f000 f91b 	bl	8001948 <FLASH_Program_Byte>
 8001712:	e016      	b.n	8001742 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d105      	bne.n	8001726 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800171a:	883b      	ldrh	r3, [r7, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	68b8      	ldr	r0, [r7, #8]
 8001720:	f000 f8ee 	bl	8001900 <FLASH_Program_HalfWord>
 8001724:	e00d      	b.n	8001742 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d105      	bne.n	8001738 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f000 f8c3 	bl	80018bc <FLASH_Program_Word>
 8001736:	e004      	b.n	8001742 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800173c:	68b8      	ldr	r0, [r7, #8]
 800173e:	f000 f88b 	bl	8001858 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001742:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001746:	f000 f847 	bl	80017d8 <FLASH_WaitForLastOperation>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_FLASH_Program+0xa4>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_FLASH_Program+0xa4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_FLASH_Program+0xa0>)
 800175c:	2200      	movs	r2, #0
 800175e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001760:	7dfb      	ldrb	r3, [r7, #23]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000284 	.word	0x20000284
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_FLASH_Unlock+0x38>)
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	da0b      	bge.n	800179e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_FLASH_Unlock+0x38>)
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_FLASH_Unlock+0x3c>)
 800178a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_FLASH_Unlock+0x38>)
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_FLASH_Unlock+0x40>)
 8001790:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_FLASH_Unlock+0x38>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	da01      	bge.n	800179e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800179e:	79fb      	ldrb	r3, [r7, #7]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	45670123 	.word	0x45670123
 80017b4:	cdef89ab 	.word	0xcdef89ab

080017b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_FLASH_Lock+0x1c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_FLASH_Lock+0x1c>)
 80017c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <FLASH_WaitForLastOperation+0x78>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80017ea:	f7ff fe13 	bl	8001414 <HAL_GetTick>
 80017ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80017f0:	e010      	b.n	8001814 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d00c      	beq.n	8001814 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <FLASH_WaitForLastOperation+0x38>
 8001800:	f7ff fe08 	bl	8001414 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	d201      	bcs.n	8001814 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e019      	b.n	8001848 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <FLASH_WaitForLastOperation+0x7c>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e8      	bne.n	80017f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <FLASH_WaitForLastOperation+0x7c>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <FLASH_WaitForLastOperation+0x7c>)
 800182e:	2201      	movs	r2, #1
 8001830:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <FLASH_WaitForLastOperation+0x7c>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800183e:	f000 f8a5 	bl	800198c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
  
}  
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000284 	.word	0x20000284
 8001854:	40023c00 	.word	0x40023c00

08001858 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <FLASH_Program_DoubleWord+0x60>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <FLASH_Program_DoubleWord+0x60>)
 800186a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800186e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <FLASH_Program_DoubleWord+0x60>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <FLASH_Program_DoubleWord+0x60>)
 8001876:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800187a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <FLASH_Program_DoubleWord+0x60>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <FLASH_Program_DoubleWord+0x60>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800188e:	f3bf 8f6f 	isb	sy
}
 8001892:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	000a      	movs	r2, r1
 80018a2:	2300      	movs	r3, #0
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	3104      	adds	r1, #4
 80018a8:	4613      	mov	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40023c00 	.word	0x40023c00

080018bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <FLASH_Program_Word+0x40>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <FLASH_Program_Word+0x40>)
 80018cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <FLASH_Program_Word+0x40>)
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <FLASH_Program_Word+0x40>)
 80018d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <FLASH_Program_Word+0x40>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <FLASH_Program_Word+0x40>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40023c00 	.word	0x40023c00

08001900 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <FLASH_Program_HalfWord+0x44>)
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <FLASH_Program_HalfWord+0x44>)
 8001912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <FLASH_Program_HalfWord+0x44>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a09      	ldr	r2, [pc, #36]	; (8001944 <FLASH_Program_HalfWord+0x44>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <FLASH_Program_HalfWord+0x44>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <FLASH_Program_HalfWord+0x44>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	801a      	strh	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <FLASH_Program_Byte+0x40>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <FLASH_Program_Byte+0x40>)
 800195a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <FLASH_Program_Byte+0x40>)
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <FLASH_Program_Byte+0x40>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <FLASH_Program_Byte+0x40>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <FLASH_Program_Byte+0x40>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	701a      	strb	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00

0800198c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 80019a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 80019aa:	2210      	movs	r2, #16
 80019ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 80019c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 80019c8:	2220      	movs	r2, #32
 80019ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 80019e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 8001a00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 8001a1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 8001a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a26:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <FLASH_SetErrorCode+0xc8>)
 8001a3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <FLASH_SetErrorCode+0xc4>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	60da      	str	r2, [r3, #12]
  }
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	20000284 	.word	0x20000284

08001a58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_FLASHEx_Erase+0xdc>)
 8001a6c:	7e1b      	ldrb	r3, [r3, #24]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_FLASHEx_Erase+0x1e>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e05a      	b.n	8001b2c <HAL_FLASHEx_Erase+0xd4>
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_FLASHEx_Erase+0xdc>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a80:	f7ff feaa 	bl	80017d8 <FLASH_WaitForLastOperation>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d14a      	bne.n	8001b24 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d117      	bne.n	8001ace <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f000 f846 	bl	8001b3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ab0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ab4:	f7ff fe90 	bl	80017d8 <FLASH_WaitForLastOperation>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_FLASHEx_Erase+0xe0>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_FLASHEx_Erase+0xe0>)
 8001ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	6113      	str	r3, [r2, #16]
 8001acc:	e028      	b.n	8001b20 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	e01c      	b.n	8001b10 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	68b8      	ldr	r0, [r7, #8]
 8001ae0:	f000 f866 	bl	8001bb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ae4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ae8:	f7ff fe76 	bl	80017d8 <FLASH_WaitForLastOperation>
 8001aec:	4603      	mov	r3, r0
 8001aee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_FLASHEx_Erase+0xe0>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_FLASHEx_Erase+0xe0>)
 8001af6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001afa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	601a      	str	r2, [r3, #0]
          break;
 8001b08:	e00a      	b.n	8001b20 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d3da      	bcc.n	8001ad6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001b20:	f000 f894 	bl	8001c4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_FLASHEx_Erase+0xdc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	761a      	strb	r2, [r3, #24]

  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000284 	.word	0x20000284
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <FLASH_MassErase+0x70>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <FLASH_MassErase+0x70>)
 8001b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b52:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d108      	bne.n	8001b6c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <FLASH_MassErase+0x70>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <FLASH_MassErase+0x70>)
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6113      	str	r3, [r2, #16]
 8001b6a:	e00f      	b.n	8001b8c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <FLASH_MassErase+0x70>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <FLASH_MassErase+0x70>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6113      	str	r3, [r2, #16]
 8001b7e:	e005      	b.n	8001b8c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <FLASH_MassErase+0x70>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <FLASH_MassErase+0x70>)
 8001b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <FLASH_MassErase+0x70>)
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	4313      	orrs	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <FLASH_MassErase+0x70>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6113      	str	r3, [r2, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e010      	b.n	8001bee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d103      	bne.n	8001bda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e009      	b.n	8001bee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d103      	bne.n	8001be8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e002      	b.n	8001bee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001be8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0b      	cmp	r3, #11
 8001bf2:	d902      	bls.n	8001bfa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <FLASH_Erase_Sector+0x98>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6113      	str	r3, [r2, #16]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c50:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d017      	beq.n	8001c8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d017      	beq.n	8001cc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ca2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <FLASH_FlushCaches+0x88>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
  }
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e177      	b.n	8001fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8166 	bne.w	8001fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80c0 	beq.w	8001fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a65      	ldr	r2, [pc, #404]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a61      	ldr	r2, [pc, #388]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <HAL_GPIO_Init+0x32c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d037      	beq.n	8001f16 <HAL_GPIO_Init+0x23e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x330>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_GPIO_Init+0x23a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_GPIO_Init+0x334>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <HAL_GPIO_Init+0x236>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <HAL_GPIO_Init+0x338>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x232>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a54      	ldr	r2, [pc, #336]	; (8002014 <HAL_GPIO_Init+0x33c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x22e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a53      	ldr	r2, [pc, #332]	; (8002018 <HAL_GPIO_Init+0x340>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x22a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x344>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x226>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x348>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x222>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x34c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x21e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_GPIO_Init+0x350>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001eee:	2309      	movs	r3, #9
 8001ef0:	e012      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	e010      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	e00e      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e00c      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00a      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f84:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f ae84 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40021400 	.word	0x40021400
 800201c:	40021800 	.word	0x40021800
 8002020:	40021c00 	.word	0x40021c00
 8002024:	40022000 	.word	0x40022000
 8002028:	40022400 	.word	0x40022400
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e264      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d075      	beq.n	800219e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b2:	4ba3      	ldr	r3, [pc, #652]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d00c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020be:	4ba0      	ldr	r3, [pc, #640]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d112      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ca:	4b9d      	ldr	r3, [pc, #628]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	4b99      	ldr	r3, [pc, #612]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d05b      	beq.n	800219c <HAL_RCC_OscConfig+0x108>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d157      	bne.n	800219c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e23f      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d106      	bne.n	8002108 <HAL_RCC_OscConfig+0x74>
 80020fa:	4b91      	ldr	r3, [pc, #580]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a90      	ldr	r2, [pc, #576]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xb0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x98>
 8002112:	4b8b      	ldr	r3, [pc, #556]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a8a      	ldr	r2, [pc, #552]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a87      	ldr	r2, [pc, #540]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xb0>
 800212c:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a83      	ldr	r2, [pc, #524]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b81      	ldr	r3, [pc, #516]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a80      	ldr	r2, [pc, #512]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f962 	bl	8001414 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f95e 	bl	8001414 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e204      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xc0>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff f94e 	bl	8001414 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff f94a 	bl	8001414 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1f0      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b6c      	ldr	r3, [pc, #432]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0xe8>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021aa:	4b65      	ldr	r3, [pc, #404]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b6:	4b62      	ldr	r3, [pc, #392]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11c      	bne.n	80021fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c2:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x152>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1c4      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4952      	ldr	r1, [pc, #328]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e03a      	b.n	8002272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <HAL_RCC_OscConfig+0x2b0>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f903 	bl	8001414 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002212:	f7ff f8ff 	bl	8001414 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1a5      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4940      	ldr	r1, [pc, #256]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCC_OscConfig+0x2b0>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff f8e2 	bl	8001414 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002254:	f7ff f8de 	bl	8001414 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e184      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d030      	beq.n	80022e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d016      	beq.n	80022b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_RCC_OscConfig+0x2b4>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7ff f8c2 	bl	8001414 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff f8be 	bl	8001414 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e164      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x200>
 80022b2:	e015      	b.n	80022e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x2b4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7ff f8ab 	bl	8001414 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c2:	f7ff f8a7 	bl	8001414 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e14d      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a0 	beq.w	800242e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_OscConfig+0x2b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d121      	bne.n	800236e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_RCC_OscConfig+0x2b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_RCC_OscConfig+0x2b8>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7ff f86d 	bl	8001414 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e011      	b.n	8002362 <HAL_RCC_OscConfig+0x2ce>
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
 800234c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7ff f860 	bl	8001414 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e106      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b85      	ldr	r3, [pc, #532]	; (8002578 <HAL_RCC_OscConfig+0x4e4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x2f0>
 8002376:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a80      	ldr	r2, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	e01c      	b.n	80023be <HAL_RCC_OscConfig+0x32a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x312>
 800238c:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6713      	str	r3, [r2, #112]	; 0x70
 8002398:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x32a>
 80023a6:	4b75      	ldr	r3, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a74      	ldr	r2, [pc, #464]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7ff f825 	bl	8001414 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff f821 	bl	8001414 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0c5      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	4b65      	ldr	r3, [pc, #404]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ee      	beq.n	80023ce <HAL_RCC_OscConfig+0x33a>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff f80f 	bl	8001414 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff f80b 	bl	8001414 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0af      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 809b 	beq.w	800256e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d05c      	beq.n	80024fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d141      	bne.n	80024d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x4ec>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe ffdf 	bl	8001414 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe ffdb 	bl	8001414 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e081      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246c:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	3b01      	subs	r3, #1
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	4937      	ldr	r1, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a2:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_RCC_OscConfig+0x4ec>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe ffb4 	bl	8001414 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe ffb0 	bl	8001414 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e056      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x41c>
 80024ce:	e04e      	b.n	800256e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x4ec>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff9d 	bl	8001414 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe ff99 	bl	8001414 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e03f      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x44a>
 80024fc:	e037      	b.n	800256e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e032      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_RCC_OscConfig+0x4e8>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d028      	beq.n	800256a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d121      	bne.n	800256a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d11a      	bne.n	800256a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002540:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002542:	4293      	cmp	r3, r2
 8002544:	d111      	bne.n	800256a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	3b01      	subs	r3, #1
 8002554:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d107      	bne.n	800256a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40007000 	.word	0x40007000
 800257c:	40023800 	.word	0x40023800
 8002580:	42470060 	.word	0x42470060

08002584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0cc      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <HAL_RCC_ClockConfig+0x1b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d90c      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b8      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a58      	ldr	r2, [pc, #352]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	494d      	ldr	r1, [pc, #308]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d044      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d119      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e07f      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d003      	beq.n	8002642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263e:	2b03      	cmp	r3, #3
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06f      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e067      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4934      	ldr	r1, [pc, #208]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002674:	f7fe fece 	bl	8001414 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe feca 	bl	8001414 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e04f      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_RCC_ClockConfig+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d20c      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e032      	b.n	8002732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4916      	ldr	r1, [pc, #88]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	490e      	ldr	r1, [pc, #56]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800270a:	f000 f821 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 800270e:	4602      	mov	r2, r0
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	490a      	ldr	r1, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	5ccb      	ldrb	r3, [r1, r3]
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fe2e 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00
 8002740:	40023800 	.word	0x40023800
 8002744:	08003d54 	.word	0x08003d54
 8002748:	20000008 	.word	0x20000008
 800274c:	2000000c 	.word	0x2000000c

08002750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002756:	2100      	movs	r1, #0
 8002758:	6079      	str	r1, [r7, #4]
 800275a:	2100      	movs	r1, #0
 800275c:	60f9      	str	r1, [r7, #12]
 800275e:	2100      	movs	r1, #0
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002762:	2100      	movs	r1, #0
 8002764:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002766:	4952      	ldr	r1, [pc, #328]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002768:	6889      	ldr	r1, [r1, #8]
 800276a:	f001 010c 	and.w	r1, r1, #12
 800276e:	2908      	cmp	r1, #8
 8002770:	d00d      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x3e>
 8002772:	2908      	cmp	r1, #8
 8002774:	f200 8094 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x150>
 8002778:	2900      	cmp	r1, #0
 800277a:	d002      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x32>
 800277c:	2904      	cmp	r1, #4
 800277e:	d003      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x38>
 8002780:	e08e      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002784:	60bb      	str	r3, [r7, #8]
       break;
 8002786:	e08e      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800278a:	60bb      	str	r3, [r7, #8]
      break;
 800278c:	e08b      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278e:	4948      	ldr	r1, [pc, #288]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002790:	6849      	ldr	r1, [r1, #4]
 8002792:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002796:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002798:	4945      	ldr	r1, [pc, #276]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800279a:	6849      	ldr	r1, [r1, #4]
 800279c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80027a0:	2900      	cmp	r1, #0
 80027a2:	d024      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a4:	4942      	ldr	r1, [pc, #264]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80027a6:	6849      	ldr	r1, [r1, #4]
 80027a8:	0989      	lsrs	r1, r1, #6
 80027aa:	4608      	mov	r0, r1
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80027b4:	f04f 0500 	mov.w	r5, #0
 80027b8:	ea00 0204 	and.w	r2, r0, r4
 80027bc:	ea01 0305 	and.w	r3, r1, r5
 80027c0:	493d      	ldr	r1, [pc, #244]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80027c2:	fb01 f003 	mul.w	r0, r1, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	fb01 f102 	mul.w	r1, r1, r2
 80027cc:	1844      	adds	r4, r0, r1
 80027ce:	493a      	ldr	r1, [pc, #232]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80027d0:	fba2 0101 	umull	r0, r1, r2, r1
 80027d4:	1863      	adds	r3, r4, r1
 80027d6:	4619      	mov	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	461a      	mov	r2, r3
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	f7fd fd5e 	bl	80002a0 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e04a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	461a      	mov	r2, r3
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	ea02 0400 	and.w	r4, r2, r0
 8002806:	ea03 0501 	and.w	r5, r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	014b      	lsls	r3, r1, #5
 8002818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800281c:	0142      	lsls	r2, r0, #5
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	1b00      	subs	r0, r0, r4
 8002824:	eb61 0105 	sbc.w	r1, r1, r5
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	018b      	lsls	r3, r1, #6
 8002832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002836:	0182      	lsls	r2, r0, #6
 8002838:	1a12      	subs	r2, r2, r0
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	00d9      	lsls	r1, r3, #3
 8002848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800284c:	00d0      	lsls	r0, r2, #3
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	1912      	adds	r2, r2, r4
 8002854:	eb45 0303 	adc.w	r3, r5, r3
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0299      	lsls	r1, r3, #10
 8002862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002866:	0290      	lsls	r0, r2, #10
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f7fd fd12 	bl	80002a0 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	60bb      	str	r3, [r7, #8]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80028a2:	60bb      	str	r3, [r7, #8]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	68bb      	ldr	r3, [r7, #8]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bdb0      	pop	{r4, r5, r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	017d7840 	.word	0x017d7840

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000008 	.word	0x20000008

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08003d64 	.word	0x08003d64

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffdc 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08003d64 	.word	0x08003d64

08002924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e03f      	b.n	80029b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fbac 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f9cb 	bl	8002d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800297c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800298c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800299c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af02      	add	r7, sp, #8
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d17c      	bne.n	8002ad8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_UART_Transmit+0x2c>
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e075      	b.n	8002ada <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Transmit+0x3e>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e06e      	b.n	8002ada <HAL_UART_Transmit+0x11c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2221      	movs	r2, #33	; 0x21
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a12:	f7fe fcff 	bl	8001414 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d108      	bne.n	8002a40 <HAL_UART_Transmit+0x82>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e003      	b.n	8002a48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a50:	e02a      	b.n	8002aa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f8e2 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e036      	b.n	8002ada <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	3302      	adds	r3, #2
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e007      	b.n	8002a9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1cf      	bne.n	8002a52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f8b2 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e006      	b.n	8002ada <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08a      	sub	sp, #40	; 0x28
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	f040 808c 	bne.w	8002c1c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_Receive+0x2e>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e084      	b.n	8002c1e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Receive+0x40>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e07d      	b.n	8002c1e <HAL_UART_Receive+0x13c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2222      	movs	r2, #34	; 0x22
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fc69 	bl	8001414 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b58:	d108      	bne.n	8002b6c <HAL_UART_Receive+0x8a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e003      	b.n	8002b74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b7c:	e043      	b.n	8002c06 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2120      	movs	r1, #32
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f84c 	bl	8002c26 <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e042      	b.n	8002c1e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e01f      	b.n	8002bf8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d007      	beq.n	8002bd2 <HAL_UART_Receive+0xf0>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_UART_Receive+0xfe>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e008      	b.n	8002bf2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1b6      	bne.n	8002b7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b090      	sub	sp, #64	; 0x40
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c36:	e050      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d04c      	beq.n	8002cda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c46:	f7fe fbe5 	bl	8001414 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d241      	bcs.n	8002cda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c76:	637a      	str	r2, [r7, #52]	; 0x34
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e5      	bne.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3314      	adds	r3, #20
 8002c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	613b      	str	r3, [r7, #16]
   return(result);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002caa:	623a      	str	r2, [r7, #32]
 8002cac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	69f9      	ldr	r1, [r7, #28]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e00f      	b.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d09f      	beq.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3740      	adds	r7, #64	; 0x40
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d08:	b09f      	sub	sp, #124	; 0x7c
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	68d9      	ldr	r1, [r3, #12]
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	ea40 0301 	orr.w	r3, r0, r1
 8002d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d48:	f021 010c 	bic.w	r1, r1, #12
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d52:	430b      	orrs	r3, r1
 8002d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d62:	6999      	ldr	r1, [r3, #24]
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	ea40 0301 	orr.w	r3, r0, r1
 8002d6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4bc5      	ldr	r3, [pc, #788]	; (8003088 <UART_SetConfig+0x384>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d004      	beq.n	8002d82 <UART_SetConfig+0x7e>
 8002d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4bc3      	ldr	r3, [pc, #780]	; (800308c <UART_SetConfig+0x388>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d103      	bne.n	8002d8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d82:	f7ff fdbb 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8002d86:	6778      	str	r0, [r7, #116]	; 0x74
 8002d88:	e002      	b.n	8002d90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d8a:	f7ff fda3 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8002d8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d98:	f040 80b6 	bne.w	8002f08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d9e:	461c      	mov	r4, r3
 8002da0:	f04f 0500 	mov.w	r5, #0
 8002da4:	4622      	mov	r2, r4
 8002da6:	462b      	mov	r3, r5
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	6439      	str	r1, [r7, #64]	; 0x40
 8002dac:	415b      	adcs	r3, r3
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
 8002db0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002db4:	1912      	adds	r2, r2, r4
 8002db6:	eb45 0303 	adc.w	r3, r5, r3
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	00d9      	lsls	r1, r3, #3
 8002dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dc8:	00d0      	lsls	r0, r2, #3
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	1911      	adds	r1, r2, r4
 8002dd0:	6639      	str	r1, [r7, #96]	; 0x60
 8002dd2:	416b      	adcs	r3, r5
 8002dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	1891      	adds	r1, r2, r2
 8002de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002de4:	415b      	adcs	r3, r3
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002df0:	f7fd fa56 	bl	80002a0 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4ba5      	ldr	r3, [pc, #660]	; (8003090 <UART_SetConfig+0x38c>)
 8002dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	011e      	lsls	r6, r3, #4
 8002e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e04:	461c      	mov	r4, r3
 8002e06:	f04f 0500 	mov.w	r5, #0
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	1891      	adds	r1, r2, r2
 8002e10:	6339      	str	r1, [r7, #48]	; 0x30
 8002e12:	415b      	adcs	r3, r3
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
 8002e16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e1a:	1912      	adds	r2, r2, r4
 8002e1c:	eb45 0303 	adc.w	r3, r5, r3
 8002e20:	f04f 0000 	mov.w	r0, #0
 8002e24:	f04f 0100 	mov.w	r1, #0
 8002e28:	00d9      	lsls	r1, r3, #3
 8002e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e2e:	00d0      	lsls	r0, r2, #3
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	1911      	adds	r1, r2, r4
 8002e36:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e38:	416b      	adcs	r3, r5
 8002e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	1891      	adds	r1, r2, r2
 8002e48:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e4a:	415b      	adcs	r3, r3
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e56:	f7fd fa23 	bl	80002a0 <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4b8c      	ldr	r3, [pc, #560]	; (8003090 <UART_SetConfig+0x38c>)
 8002e60:	fba3 1302 	umull	r1, r3, r3, r2
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	2164      	movs	r1, #100	; 0x64
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	3332      	adds	r3, #50	; 0x32
 8002e72:	4a87      	ldr	r2, [pc, #540]	; (8003090 <UART_SetConfig+0x38c>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e80:	441e      	add	r6, r3
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	4618      	mov	r0, r3
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	1894      	adds	r4, r2, r2
 8002e90:	623c      	str	r4, [r7, #32]
 8002e92:	415b      	adcs	r3, r3
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e9a:	1812      	adds	r2, r2, r0
 8002e9c:	eb41 0303 	adc.w	r3, r1, r3
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	f04f 0500 	mov.w	r5, #0
 8002ea8:	00dd      	lsls	r5, r3, #3
 8002eaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eae:	00d4      	lsls	r4, r2, #3
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	1814      	adds	r4, r2, r0
 8002eb6:	653c      	str	r4, [r7, #80]	; 0x50
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	657b      	str	r3, [r7, #84]	; 0x54
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	1891      	adds	r1, r2, r2
 8002ec8:	61b9      	str	r1, [r7, #24]
 8002eca:	415b      	adcs	r3, r3
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ed6:	f7fd f9e3 	bl	80002a0 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <UART_SetConfig+0x38c>)
 8002ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2164      	movs	r1, #100	; 0x64
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a67      	ldr	r2, [pc, #412]	; (8003090 <UART_SetConfig+0x38c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	f003 0207 	and.w	r2, r3, #7
 8002efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4432      	add	r2, r6
 8002f04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f06:	e0b9      	b.n	800307c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0a:	461c      	mov	r4, r3
 8002f0c:	f04f 0500 	mov.w	r5, #0
 8002f10:	4622      	mov	r2, r4
 8002f12:	462b      	mov	r3, r5
 8002f14:	1891      	adds	r1, r2, r2
 8002f16:	6139      	str	r1, [r7, #16]
 8002f18:	415b      	adcs	r3, r3
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f20:	1912      	adds	r2, r2, r4
 8002f22:	eb45 0303 	adc.w	r3, r5, r3
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	00d9      	lsls	r1, r3, #3
 8002f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f34:	00d0      	lsls	r0, r2, #3
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	eb12 0804 	adds.w	r8, r2, r4
 8002f3e:	eb43 0905 	adc.w	r9, r3, r5
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	008b      	lsls	r3, r1, #2
 8002f56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f5a:	0082      	lsls	r2, r0, #2
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	4649      	mov	r1, r9
 8002f60:	f7fd f99e 	bl	80002a0 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <UART_SetConfig+0x38c>)
 8002f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	011e      	lsls	r6, r3, #4
 8002f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f74:	4618      	mov	r0, r3
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	1894      	adds	r4, r2, r2
 8002f80:	60bc      	str	r4, [r7, #8]
 8002f82:	415b      	adcs	r3, r3
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f8a:	1812      	adds	r2, r2, r0
 8002f8c:	eb41 0303 	adc.w	r3, r1, r3
 8002f90:	f04f 0400 	mov.w	r4, #0
 8002f94:	f04f 0500 	mov.w	r5, #0
 8002f98:	00dd      	lsls	r5, r3, #3
 8002f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f9e:	00d4      	lsls	r4, r2, #3
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	1814      	adds	r4, r2, r0
 8002fa6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002fa8:	414b      	adcs	r3, r1
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	008b      	lsls	r3, r1, #2
 8002fc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fc4:	0082      	lsls	r2, r0, #2
 8002fc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002fca:	f7fd f969 	bl	80002a0 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <UART_SetConfig+0x38c>)
 8002fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	2164      	movs	r1, #100	; 0x64
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	3332      	adds	r3, #50	; 0x32
 8002fe6:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <UART_SetConfig+0x38c>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff2:	441e      	add	r6, r3
 8002ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	1894      	adds	r4, r2, r2
 8003002:	603c      	str	r4, [r7, #0]
 8003004:	415b      	adcs	r3, r3
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800300c:	1812      	adds	r2, r2, r0
 800300e:	eb41 0303 	adc.w	r3, r1, r3
 8003012:	f04f 0400 	mov.w	r4, #0
 8003016:	f04f 0500 	mov.w	r5, #0
 800301a:	00dd      	lsls	r5, r3, #3
 800301c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003020:	00d4      	lsls	r4, r2, #3
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	eb12 0a00 	adds.w	sl, r2, r0
 800302a:	eb43 0b01 	adc.w	fp, r3, r1
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	008b      	lsls	r3, r1, #2
 8003042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003046:	0082      	lsls	r2, r0, #2
 8003048:	4650      	mov	r0, sl
 800304a:	4659      	mov	r1, fp
 800304c:	f7fd f928 	bl	80002a0 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <UART_SetConfig+0x38c>)
 8003056:	fba3 1302 	umull	r1, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2164      	movs	r1, #100	; 0x64
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	3332      	adds	r3, #50	; 0x32
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <UART_SetConfig+0x38c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4432      	add	r2, r6
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	377c      	adds	r7, #124	; 0x7c
 8003080:	46bd      	mov	sp, r7
 8003082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003086:	bf00      	nop
 8003088:	40011000 	.word	0x40011000
 800308c:	40011400 	.word	0x40011400
 8003090:	51eb851f 	.word	0x51eb851f

08003094 <__errno>:
 8003094:	4b01      	ldr	r3, [pc, #4]	; (800309c <__errno+0x8>)
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000014 	.word	0x20000014

080030a0 <__libc_init_array>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4d0d      	ldr	r5, [pc, #52]	; (80030d8 <__libc_init_array+0x38>)
 80030a4:	4c0d      	ldr	r4, [pc, #52]	; (80030dc <__libc_init_array+0x3c>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	2600      	movs	r6, #0
 80030ac:	42a6      	cmp	r6, r4
 80030ae:	d109      	bne.n	80030c4 <__libc_init_array+0x24>
 80030b0:	4d0b      	ldr	r5, [pc, #44]	; (80030e0 <__libc_init_array+0x40>)
 80030b2:	4c0c      	ldr	r4, [pc, #48]	; (80030e4 <__libc_init_array+0x44>)
 80030b4:	f000 fc4e 	bl	8003954 <_init>
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	2600      	movs	r6, #0
 80030be:	42a6      	cmp	r6, r4
 80030c0:	d105      	bne.n	80030ce <__libc_init_array+0x2e>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c8:	4798      	blx	r3
 80030ca:	3601      	adds	r6, #1
 80030cc:	e7ee      	b.n	80030ac <__libc_init_array+0xc>
 80030ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d2:	4798      	blx	r3
 80030d4:	3601      	adds	r6, #1
 80030d6:	e7f2      	b.n	80030be <__libc_init_array+0x1e>
 80030d8:	08003da8 	.word	0x08003da8
 80030dc:	08003da8 	.word	0x08003da8
 80030e0:	08003da8 	.word	0x08003da8
 80030e4:	08003dac 	.word	0x08003dac

080030e8 <memset>:
 80030e8:	4402      	add	r2, r0
 80030ea:	4603      	mov	r3, r0
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d100      	bne.n	80030f2 <memset+0xa>
 80030f0:	4770      	bx	lr
 80030f2:	f803 1b01 	strb.w	r1, [r3], #1
 80030f6:	e7f9      	b.n	80030ec <memset+0x4>

080030f8 <_vsiprintf_r>:
 80030f8:	b500      	push	{lr}
 80030fa:	b09b      	sub	sp, #108	; 0x6c
 80030fc:	9100      	str	r1, [sp, #0]
 80030fe:	9104      	str	r1, [sp, #16]
 8003100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003104:	9105      	str	r1, [sp, #20]
 8003106:	9102      	str	r1, [sp, #8]
 8003108:	4905      	ldr	r1, [pc, #20]	; (8003120 <_vsiprintf_r+0x28>)
 800310a:	9103      	str	r1, [sp, #12]
 800310c:	4669      	mov	r1, sp
 800310e:	f000 f86f 	bl	80031f0 <_svfiprintf_r>
 8003112:	9b00      	ldr	r3, [sp, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	b01b      	add	sp, #108	; 0x6c
 800311a:	f85d fb04 	ldr.w	pc, [sp], #4
 800311e:	bf00      	nop
 8003120:	ffff0208 	.word	0xffff0208

08003124 <vsiprintf>:
 8003124:	4613      	mov	r3, r2
 8003126:	460a      	mov	r2, r1
 8003128:	4601      	mov	r1, r0
 800312a:	4802      	ldr	r0, [pc, #8]	; (8003134 <vsiprintf+0x10>)
 800312c:	6800      	ldr	r0, [r0, #0]
 800312e:	f7ff bfe3 	b.w	80030f8 <_vsiprintf_r>
 8003132:	bf00      	nop
 8003134:	20000014 	.word	0x20000014

08003138 <__ssputs_r>:
 8003138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800313c:	688e      	ldr	r6, [r1, #8]
 800313e:	429e      	cmp	r6, r3
 8003140:	4682      	mov	sl, r0
 8003142:	460c      	mov	r4, r1
 8003144:	4690      	mov	r8, r2
 8003146:	461f      	mov	r7, r3
 8003148:	d838      	bhi.n	80031bc <__ssputs_r+0x84>
 800314a:	898a      	ldrh	r2, [r1, #12]
 800314c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003150:	d032      	beq.n	80031b8 <__ssputs_r+0x80>
 8003152:	6825      	ldr	r5, [r4, #0]
 8003154:	6909      	ldr	r1, [r1, #16]
 8003156:	eba5 0901 	sub.w	r9, r5, r1
 800315a:	6965      	ldr	r5, [r4, #20]
 800315c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003164:	3301      	adds	r3, #1
 8003166:	444b      	add	r3, r9
 8003168:	106d      	asrs	r5, r5, #1
 800316a:	429d      	cmp	r5, r3
 800316c:	bf38      	it	cc
 800316e:	461d      	movcc	r5, r3
 8003170:	0553      	lsls	r3, r2, #21
 8003172:	d531      	bpl.n	80031d8 <__ssputs_r+0xa0>
 8003174:	4629      	mov	r1, r5
 8003176:	f000 fb47 	bl	8003808 <_malloc_r>
 800317a:	4606      	mov	r6, r0
 800317c:	b950      	cbnz	r0, 8003194 <__ssputs_r+0x5c>
 800317e:	230c      	movs	r3, #12
 8003180:	f8ca 3000 	str.w	r3, [sl]
 8003184:	89a3      	ldrh	r3, [r4, #12]
 8003186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318a:	81a3      	strh	r3, [r4, #12]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003194:	6921      	ldr	r1, [r4, #16]
 8003196:	464a      	mov	r2, r9
 8003198:	f000 fabe 	bl	8003718 <memcpy>
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	81a3      	strh	r3, [r4, #12]
 80031a8:	6126      	str	r6, [r4, #16]
 80031aa:	6165      	str	r5, [r4, #20]
 80031ac:	444e      	add	r6, r9
 80031ae:	eba5 0509 	sub.w	r5, r5, r9
 80031b2:	6026      	str	r6, [r4, #0]
 80031b4:	60a5      	str	r5, [r4, #8]
 80031b6:	463e      	mov	r6, r7
 80031b8:	42be      	cmp	r6, r7
 80031ba:	d900      	bls.n	80031be <__ssputs_r+0x86>
 80031bc:	463e      	mov	r6, r7
 80031be:	4632      	mov	r2, r6
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	4641      	mov	r1, r8
 80031c4:	f000 fab6 	bl	8003734 <memmove>
 80031c8:	68a3      	ldr	r3, [r4, #8]
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	1b9b      	subs	r3, r3, r6
 80031ce:	4432      	add	r2, r6
 80031d0:	60a3      	str	r3, [r4, #8]
 80031d2:	6022      	str	r2, [r4, #0]
 80031d4:	2000      	movs	r0, #0
 80031d6:	e7db      	b.n	8003190 <__ssputs_r+0x58>
 80031d8:	462a      	mov	r2, r5
 80031da:	f000 fb6f 	bl	80038bc <_realloc_r>
 80031de:	4606      	mov	r6, r0
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d1e1      	bne.n	80031a8 <__ssputs_r+0x70>
 80031e4:	6921      	ldr	r1, [r4, #16]
 80031e6:	4650      	mov	r0, sl
 80031e8:	f000 fabe 	bl	8003768 <_free_r>
 80031ec:	e7c7      	b.n	800317e <__ssputs_r+0x46>
	...

080031f0 <_svfiprintf_r>:
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	4698      	mov	r8, r3
 80031f6:	898b      	ldrh	r3, [r1, #12]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	b09d      	sub	sp, #116	; 0x74
 80031fc:	4607      	mov	r7, r0
 80031fe:	460d      	mov	r5, r1
 8003200:	4614      	mov	r4, r2
 8003202:	d50e      	bpl.n	8003222 <_svfiprintf_r+0x32>
 8003204:	690b      	ldr	r3, [r1, #16]
 8003206:	b963      	cbnz	r3, 8003222 <_svfiprintf_r+0x32>
 8003208:	2140      	movs	r1, #64	; 0x40
 800320a:	f000 fafd 	bl	8003808 <_malloc_r>
 800320e:	6028      	str	r0, [r5, #0]
 8003210:	6128      	str	r0, [r5, #16]
 8003212:	b920      	cbnz	r0, 800321e <_svfiprintf_r+0x2e>
 8003214:	230c      	movs	r3, #12
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	e0d1      	b.n	80033c2 <_svfiprintf_r+0x1d2>
 800321e:	2340      	movs	r3, #64	; 0x40
 8003220:	616b      	str	r3, [r5, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	9309      	str	r3, [sp, #36]	; 0x24
 8003226:	2320      	movs	r3, #32
 8003228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800322c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003230:	2330      	movs	r3, #48	; 0x30
 8003232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80033dc <_svfiprintf_r+0x1ec>
 8003236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800323a:	f04f 0901 	mov.w	r9, #1
 800323e:	4623      	mov	r3, r4
 8003240:	469a      	mov	sl, r3
 8003242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003246:	b10a      	cbz	r2, 800324c <_svfiprintf_r+0x5c>
 8003248:	2a25      	cmp	r2, #37	; 0x25
 800324a:	d1f9      	bne.n	8003240 <_svfiprintf_r+0x50>
 800324c:	ebba 0b04 	subs.w	fp, sl, r4
 8003250:	d00b      	beq.n	800326a <_svfiprintf_r+0x7a>
 8003252:	465b      	mov	r3, fp
 8003254:	4622      	mov	r2, r4
 8003256:	4629      	mov	r1, r5
 8003258:	4638      	mov	r0, r7
 800325a:	f7ff ff6d 	bl	8003138 <__ssputs_r>
 800325e:	3001      	adds	r0, #1
 8003260:	f000 80aa 	beq.w	80033b8 <_svfiprintf_r+0x1c8>
 8003264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003266:	445a      	add	r2, fp
 8003268:	9209      	str	r2, [sp, #36]	; 0x24
 800326a:	f89a 3000 	ldrb.w	r3, [sl]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80a2 	beq.w	80033b8 <_svfiprintf_r+0x1c8>
 8003274:	2300      	movs	r3, #0
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800327e:	f10a 0a01 	add.w	sl, sl, #1
 8003282:	9304      	str	r3, [sp, #16]
 8003284:	9307      	str	r3, [sp, #28]
 8003286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800328a:	931a      	str	r3, [sp, #104]	; 0x68
 800328c:	4654      	mov	r4, sl
 800328e:	2205      	movs	r2, #5
 8003290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003294:	4851      	ldr	r0, [pc, #324]	; (80033dc <_svfiprintf_r+0x1ec>)
 8003296:	f7fc ffb3 	bl	8000200 <memchr>
 800329a:	9a04      	ldr	r2, [sp, #16]
 800329c:	b9d8      	cbnz	r0, 80032d6 <_svfiprintf_r+0xe6>
 800329e:	06d0      	lsls	r0, r2, #27
 80032a0:	bf44      	itt	mi
 80032a2:	2320      	movmi	r3, #32
 80032a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032a8:	0711      	lsls	r1, r2, #28
 80032aa:	bf44      	itt	mi
 80032ac:	232b      	movmi	r3, #43	; 0x2b
 80032ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032b2:	f89a 3000 	ldrb.w	r3, [sl]
 80032b6:	2b2a      	cmp	r3, #42	; 0x2a
 80032b8:	d015      	beq.n	80032e6 <_svfiprintf_r+0xf6>
 80032ba:	9a07      	ldr	r2, [sp, #28]
 80032bc:	4654      	mov	r4, sl
 80032be:	2000      	movs	r0, #0
 80032c0:	f04f 0c0a 	mov.w	ip, #10
 80032c4:	4621      	mov	r1, r4
 80032c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ca:	3b30      	subs	r3, #48	; 0x30
 80032cc:	2b09      	cmp	r3, #9
 80032ce:	d94e      	bls.n	800336e <_svfiprintf_r+0x17e>
 80032d0:	b1b0      	cbz	r0, 8003300 <_svfiprintf_r+0x110>
 80032d2:	9207      	str	r2, [sp, #28]
 80032d4:	e014      	b.n	8003300 <_svfiprintf_r+0x110>
 80032d6:	eba0 0308 	sub.w	r3, r0, r8
 80032da:	fa09 f303 	lsl.w	r3, r9, r3
 80032de:	4313      	orrs	r3, r2
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	46a2      	mov	sl, r4
 80032e4:	e7d2      	b.n	800328c <_svfiprintf_r+0x9c>
 80032e6:	9b03      	ldr	r3, [sp, #12]
 80032e8:	1d19      	adds	r1, r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	9103      	str	r1, [sp, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bfbb      	ittet	lt
 80032f2:	425b      	neglt	r3, r3
 80032f4:	f042 0202 	orrlt.w	r2, r2, #2
 80032f8:	9307      	strge	r3, [sp, #28]
 80032fa:	9307      	strlt	r3, [sp, #28]
 80032fc:	bfb8      	it	lt
 80032fe:	9204      	strlt	r2, [sp, #16]
 8003300:	7823      	ldrb	r3, [r4, #0]
 8003302:	2b2e      	cmp	r3, #46	; 0x2e
 8003304:	d10c      	bne.n	8003320 <_svfiprintf_r+0x130>
 8003306:	7863      	ldrb	r3, [r4, #1]
 8003308:	2b2a      	cmp	r3, #42	; 0x2a
 800330a:	d135      	bne.n	8003378 <_svfiprintf_r+0x188>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	9203      	str	r2, [sp, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	bfb8      	it	lt
 8003318:	f04f 33ff 	movlt.w	r3, #4294967295
 800331c:	3402      	adds	r4, #2
 800331e:	9305      	str	r3, [sp, #20]
 8003320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80033ec <_svfiprintf_r+0x1fc>
 8003324:	7821      	ldrb	r1, [r4, #0]
 8003326:	2203      	movs	r2, #3
 8003328:	4650      	mov	r0, sl
 800332a:	f7fc ff69 	bl	8000200 <memchr>
 800332e:	b140      	cbz	r0, 8003342 <_svfiprintf_r+0x152>
 8003330:	2340      	movs	r3, #64	; 0x40
 8003332:	eba0 000a 	sub.w	r0, r0, sl
 8003336:	fa03 f000 	lsl.w	r0, r3, r0
 800333a:	9b04      	ldr	r3, [sp, #16]
 800333c:	4303      	orrs	r3, r0
 800333e:	3401      	adds	r4, #1
 8003340:	9304      	str	r3, [sp, #16]
 8003342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003346:	4826      	ldr	r0, [pc, #152]	; (80033e0 <_svfiprintf_r+0x1f0>)
 8003348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800334c:	2206      	movs	r2, #6
 800334e:	f7fc ff57 	bl	8000200 <memchr>
 8003352:	2800      	cmp	r0, #0
 8003354:	d038      	beq.n	80033c8 <_svfiprintf_r+0x1d8>
 8003356:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <_svfiprintf_r+0x1f4>)
 8003358:	bb1b      	cbnz	r3, 80033a2 <_svfiprintf_r+0x1b2>
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	3307      	adds	r3, #7
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	3308      	adds	r3, #8
 8003364:	9303      	str	r3, [sp, #12]
 8003366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003368:	4433      	add	r3, r6
 800336a:	9309      	str	r3, [sp, #36]	; 0x24
 800336c:	e767      	b.n	800323e <_svfiprintf_r+0x4e>
 800336e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003372:	460c      	mov	r4, r1
 8003374:	2001      	movs	r0, #1
 8003376:	e7a5      	b.n	80032c4 <_svfiprintf_r+0xd4>
 8003378:	2300      	movs	r3, #0
 800337a:	3401      	adds	r4, #1
 800337c:	9305      	str	r3, [sp, #20]
 800337e:	4619      	mov	r1, r3
 8003380:	f04f 0c0a 	mov.w	ip, #10
 8003384:	4620      	mov	r0, r4
 8003386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800338a:	3a30      	subs	r2, #48	; 0x30
 800338c:	2a09      	cmp	r2, #9
 800338e:	d903      	bls.n	8003398 <_svfiprintf_r+0x1a8>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0c5      	beq.n	8003320 <_svfiprintf_r+0x130>
 8003394:	9105      	str	r1, [sp, #20]
 8003396:	e7c3      	b.n	8003320 <_svfiprintf_r+0x130>
 8003398:	fb0c 2101 	mla	r1, ip, r1, r2
 800339c:	4604      	mov	r4, r0
 800339e:	2301      	movs	r3, #1
 80033a0:	e7f0      	b.n	8003384 <_svfiprintf_r+0x194>
 80033a2:	ab03      	add	r3, sp, #12
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	462a      	mov	r2, r5
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <_svfiprintf_r+0x1f8>)
 80033aa:	a904      	add	r1, sp, #16
 80033ac:	4638      	mov	r0, r7
 80033ae:	f3af 8000 	nop.w
 80033b2:	1c42      	adds	r2, r0, #1
 80033b4:	4606      	mov	r6, r0
 80033b6:	d1d6      	bne.n	8003366 <_svfiprintf_r+0x176>
 80033b8:	89ab      	ldrh	r3, [r5, #12]
 80033ba:	065b      	lsls	r3, r3, #25
 80033bc:	f53f af2c 	bmi.w	8003218 <_svfiprintf_r+0x28>
 80033c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033c2:	b01d      	add	sp, #116	; 0x74
 80033c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c8:	ab03      	add	r3, sp, #12
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	462a      	mov	r2, r5
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <_svfiprintf_r+0x1f8>)
 80033d0:	a904      	add	r1, sp, #16
 80033d2:	4638      	mov	r0, r7
 80033d4:	f000 f87a 	bl	80034cc <_printf_i>
 80033d8:	e7eb      	b.n	80033b2 <_svfiprintf_r+0x1c2>
 80033da:	bf00      	nop
 80033dc:	08003d6c 	.word	0x08003d6c
 80033e0:	08003d76 	.word	0x08003d76
 80033e4:	00000000 	.word	0x00000000
 80033e8:	08003139 	.word	0x08003139
 80033ec:	08003d72 	.word	0x08003d72

080033f0 <_printf_common>:
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	4616      	mov	r6, r2
 80033f6:	4699      	mov	r9, r3
 80033f8:	688a      	ldr	r2, [r1, #8]
 80033fa:	690b      	ldr	r3, [r1, #16]
 80033fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003400:	4293      	cmp	r3, r2
 8003402:	bfb8      	it	lt
 8003404:	4613      	movlt	r3, r2
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800340c:	4607      	mov	r7, r0
 800340e:	460c      	mov	r4, r1
 8003410:	b10a      	cbz	r2, 8003416 <_printf_common+0x26>
 8003412:	3301      	adds	r3, #1
 8003414:	6033      	str	r3, [r6, #0]
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	0699      	lsls	r1, r3, #26
 800341a:	bf42      	ittt	mi
 800341c:	6833      	ldrmi	r3, [r6, #0]
 800341e:	3302      	addmi	r3, #2
 8003420:	6033      	strmi	r3, [r6, #0]
 8003422:	6825      	ldr	r5, [r4, #0]
 8003424:	f015 0506 	ands.w	r5, r5, #6
 8003428:	d106      	bne.n	8003438 <_printf_common+0x48>
 800342a:	f104 0a19 	add.w	sl, r4, #25
 800342e:	68e3      	ldr	r3, [r4, #12]
 8003430:	6832      	ldr	r2, [r6, #0]
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	42ab      	cmp	r3, r5
 8003436:	dc26      	bgt.n	8003486 <_printf_common+0x96>
 8003438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800343c:	1e13      	subs	r3, r2, #0
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	bf18      	it	ne
 8003442:	2301      	movne	r3, #1
 8003444:	0692      	lsls	r2, r2, #26
 8003446:	d42b      	bmi.n	80034a0 <_printf_common+0xb0>
 8003448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800344c:	4649      	mov	r1, r9
 800344e:	4638      	mov	r0, r7
 8003450:	47c0      	blx	r8
 8003452:	3001      	adds	r0, #1
 8003454:	d01e      	beq.n	8003494 <_printf_common+0xa4>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	68e5      	ldr	r5, [r4, #12]
 800345a:	6832      	ldr	r2, [r6, #0]
 800345c:	f003 0306 	and.w	r3, r3, #6
 8003460:	2b04      	cmp	r3, #4
 8003462:	bf08      	it	eq
 8003464:	1aad      	subeq	r5, r5, r2
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	6922      	ldr	r2, [r4, #16]
 800346a:	bf0c      	ite	eq
 800346c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003470:	2500      	movne	r5, #0
 8003472:	4293      	cmp	r3, r2
 8003474:	bfc4      	itt	gt
 8003476:	1a9b      	subgt	r3, r3, r2
 8003478:	18ed      	addgt	r5, r5, r3
 800347a:	2600      	movs	r6, #0
 800347c:	341a      	adds	r4, #26
 800347e:	42b5      	cmp	r5, r6
 8003480:	d11a      	bne.n	80034b8 <_printf_common+0xc8>
 8003482:	2000      	movs	r0, #0
 8003484:	e008      	b.n	8003498 <_printf_common+0xa8>
 8003486:	2301      	movs	r3, #1
 8003488:	4652      	mov	r2, sl
 800348a:	4649      	mov	r1, r9
 800348c:	4638      	mov	r0, r7
 800348e:	47c0      	blx	r8
 8003490:	3001      	adds	r0, #1
 8003492:	d103      	bne.n	800349c <_printf_common+0xac>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349c:	3501      	adds	r5, #1
 800349e:	e7c6      	b.n	800342e <_printf_common+0x3e>
 80034a0:	18e1      	adds	r1, r4, r3
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	2030      	movs	r0, #48	; 0x30
 80034a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034aa:	4422      	add	r2, r4
 80034ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b4:	3302      	adds	r3, #2
 80034b6:	e7c7      	b.n	8003448 <_printf_common+0x58>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4622      	mov	r2, r4
 80034bc:	4649      	mov	r1, r9
 80034be:	4638      	mov	r0, r7
 80034c0:	47c0      	blx	r8
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0e6      	beq.n	8003494 <_printf_common+0xa4>
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7d9      	b.n	800347e <_printf_common+0x8e>
	...

080034cc <_printf_i>:
 80034cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	460c      	mov	r4, r1
 80034d2:	4691      	mov	r9, r2
 80034d4:	7e27      	ldrb	r7, [r4, #24]
 80034d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034d8:	2f78      	cmp	r7, #120	; 0x78
 80034da:	4680      	mov	r8, r0
 80034dc:	469a      	mov	sl, r3
 80034de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034e2:	d807      	bhi.n	80034f4 <_printf_i+0x28>
 80034e4:	2f62      	cmp	r7, #98	; 0x62
 80034e6:	d80a      	bhi.n	80034fe <_printf_i+0x32>
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	f000 80d8 	beq.w	800369e <_printf_i+0x1d2>
 80034ee:	2f58      	cmp	r7, #88	; 0x58
 80034f0:	f000 80a3 	beq.w	800363a <_printf_i+0x16e>
 80034f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034fc:	e03a      	b.n	8003574 <_printf_i+0xa8>
 80034fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003502:	2b15      	cmp	r3, #21
 8003504:	d8f6      	bhi.n	80034f4 <_printf_i+0x28>
 8003506:	a001      	add	r0, pc, #4	; (adr r0, 800350c <_printf_i+0x40>)
 8003508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800350c:	08003565 	.word	0x08003565
 8003510:	08003579 	.word	0x08003579
 8003514:	080034f5 	.word	0x080034f5
 8003518:	080034f5 	.word	0x080034f5
 800351c:	080034f5 	.word	0x080034f5
 8003520:	080034f5 	.word	0x080034f5
 8003524:	08003579 	.word	0x08003579
 8003528:	080034f5 	.word	0x080034f5
 800352c:	080034f5 	.word	0x080034f5
 8003530:	080034f5 	.word	0x080034f5
 8003534:	080034f5 	.word	0x080034f5
 8003538:	08003685 	.word	0x08003685
 800353c:	080035a9 	.word	0x080035a9
 8003540:	08003667 	.word	0x08003667
 8003544:	080034f5 	.word	0x080034f5
 8003548:	080034f5 	.word	0x080034f5
 800354c:	080036a7 	.word	0x080036a7
 8003550:	080034f5 	.word	0x080034f5
 8003554:	080035a9 	.word	0x080035a9
 8003558:	080034f5 	.word	0x080034f5
 800355c:	080034f5 	.word	0x080034f5
 8003560:	0800366f 	.word	0x0800366f
 8003564:	680b      	ldr	r3, [r1, #0]
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	600a      	str	r2, [r1, #0]
 800356c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003574:	2301      	movs	r3, #1
 8003576:	e0a3      	b.n	80036c0 <_printf_i+0x1f4>
 8003578:	6825      	ldr	r5, [r4, #0]
 800357a:	6808      	ldr	r0, [r1, #0]
 800357c:	062e      	lsls	r6, r5, #24
 800357e:	f100 0304 	add.w	r3, r0, #4
 8003582:	d50a      	bpl.n	800359a <_printf_i+0xce>
 8003584:	6805      	ldr	r5, [r0, #0]
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	2d00      	cmp	r5, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xc8>
 800358c:	232d      	movs	r3, #45	; 0x2d
 800358e:	426d      	negs	r5, r5
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	485e      	ldr	r0, [pc, #376]	; (8003710 <_printf_i+0x244>)
 8003596:	230a      	movs	r3, #10
 8003598:	e019      	b.n	80035ce <_printf_i+0x102>
 800359a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800359e:	6805      	ldr	r5, [r0, #0]
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	bf18      	it	ne
 80035a4:	b22d      	sxthne	r5, r5
 80035a6:	e7ef      	b.n	8003588 <_printf_i+0xbc>
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	1d18      	adds	r0, r3, #4
 80035ae:	6008      	str	r0, [r1, #0]
 80035b0:	0628      	lsls	r0, r5, #24
 80035b2:	d501      	bpl.n	80035b8 <_printf_i+0xec>
 80035b4:	681d      	ldr	r5, [r3, #0]
 80035b6:	e002      	b.n	80035be <_printf_i+0xf2>
 80035b8:	0669      	lsls	r1, r5, #25
 80035ba:	d5fb      	bpl.n	80035b4 <_printf_i+0xe8>
 80035bc:	881d      	ldrh	r5, [r3, #0]
 80035be:	4854      	ldr	r0, [pc, #336]	; (8003710 <_printf_i+0x244>)
 80035c0:	2f6f      	cmp	r7, #111	; 0x6f
 80035c2:	bf0c      	ite	eq
 80035c4:	2308      	moveq	r3, #8
 80035c6:	230a      	movne	r3, #10
 80035c8:	2100      	movs	r1, #0
 80035ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035ce:	6866      	ldr	r6, [r4, #4]
 80035d0:	60a6      	str	r6, [r4, #8]
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	bfa2      	ittt	ge
 80035d6:	6821      	ldrge	r1, [r4, #0]
 80035d8:	f021 0104 	bicge.w	r1, r1, #4
 80035dc:	6021      	strge	r1, [r4, #0]
 80035de:	b90d      	cbnz	r5, 80035e4 <_printf_i+0x118>
 80035e0:	2e00      	cmp	r6, #0
 80035e2:	d04d      	beq.n	8003680 <_printf_i+0x1b4>
 80035e4:	4616      	mov	r6, r2
 80035e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ea:	fb03 5711 	mls	r7, r3, r1, r5
 80035ee:	5dc7      	ldrb	r7, [r0, r7]
 80035f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035f4:	462f      	mov	r7, r5
 80035f6:	42bb      	cmp	r3, r7
 80035f8:	460d      	mov	r5, r1
 80035fa:	d9f4      	bls.n	80035e6 <_printf_i+0x11a>
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d10b      	bne.n	8003618 <_printf_i+0x14c>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	07df      	lsls	r7, r3, #31
 8003604:	d508      	bpl.n	8003618 <_printf_i+0x14c>
 8003606:	6923      	ldr	r3, [r4, #16]
 8003608:	6861      	ldr	r1, [r4, #4]
 800360a:	4299      	cmp	r1, r3
 800360c:	bfde      	ittt	le
 800360e:	2330      	movle	r3, #48	; 0x30
 8003610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003618:	1b92      	subs	r2, r2, r6
 800361a:	6122      	str	r2, [r4, #16]
 800361c:	f8cd a000 	str.w	sl, [sp]
 8003620:	464b      	mov	r3, r9
 8003622:	aa03      	add	r2, sp, #12
 8003624:	4621      	mov	r1, r4
 8003626:	4640      	mov	r0, r8
 8003628:	f7ff fee2 	bl	80033f0 <_printf_common>
 800362c:	3001      	adds	r0, #1
 800362e:	d14c      	bne.n	80036ca <_printf_i+0x1fe>
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	b004      	add	sp, #16
 8003636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363a:	4835      	ldr	r0, [pc, #212]	; (8003710 <_printf_i+0x244>)
 800363c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	680e      	ldr	r6, [r1, #0]
 8003644:	061f      	lsls	r7, r3, #24
 8003646:	f856 5b04 	ldr.w	r5, [r6], #4
 800364a:	600e      	str	r6, [r1, #0]
 800364c:	d514      	bpl.n	8003678 <_printf_i+0x1ac>
 800364e:	07d9      	lsls	r1, r3, #31
 8003650:	bf44      	itt	mi
 8003652:	f043 0320 	orrmi.w	r3, r3, #32
 8003656:	6023      	strmi	r3, [r4, #0]
 8003658:	b91d      	cbnz	r5, 8003662 <_printf_i+0x196>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	f023 0320 	bic.w	r3, r3, #32
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	2310      	movs	r3, #16
 8003664:	e7b0      	b.n	80035c8 <_printf_i+0xfc>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	f043 0320 	orr.w	r3, r3, #32
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	2378      	movs	r3, #120	; 0x78
 8003670:	4828      	ldr	r0, [pc, #160]	; (8003714 <_printf_i+0x248>)
 8003672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003676:	e7e3      	b.n	8003640 <_printf_i+0x174>
 8003678:	065e      	lsls	r6, r3, #25
 800367a:	bf48      	it	mi
 800367c:	b2ad      	uxthmi	r5, r5
 800367e:	e7e6      	b.n	800364e <_printf_i+0x182>
 8003680:	4616      	mov	r6, r2
 8003682:	e7bb      	b.n	80035fc <_printf_i+0x130>
 8003684:	680b      	ldr	r3, [r1, #0]
 8003686:	6826      	ldr	r6, [r4, #0]
 8003688:	6960      	ldr	r0, [r4, #20]
 800368a:	1d1d      	adds	r5, r3, #4
 800368c:	600d      	str	r5, [r1, #0]
 800368e:	0635      	lsls	r5, r6, #24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	d501      	bpl.n	8003698 <_printf_i+0x1cc>
 8003694:	6018      	str	r0, [r3, #0]
 8003696:	e002      	b.n	800369e <_printf_i+0x1d2>
 8003698:	0671      	lsls	r1, r6, #25
 800369a:	d5fb      	bpl.n	8003694 <_printf_i+0x1c8>
 800369c:	8018      	strh	r0, [r3, #0]
 800369e:	2300      	movs	r3, #0
 80036a0:	6123      	str	r3, [r4, #16]
 80036a2:	4616      	mov	r6, r2
 80036a4:	e7ba      	b.n	800361c <_printf_i+0x150>
 80036a6:	680b      	ldr	r3, [r1, #0]
 80036a8:	1d1a      	adds	r2, r3, #4
 80036aa:	600a      	str	r2, [r1, #0]
 80036ac:	681e      	ldr	r6, [r3, #0]
 80036ae:	6862      	ldr	r2, [r4, #4]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7fc fda4 	bl	8000200 <memchr>
 80036b8:	b108      	cbz	r0, 80036be <_printf_i+0x1f2>
 80036ba:	1b80      	subs	r0, r0, r6
 80036bc:	6060      	str	r0, [r4, #4]
 80036be:	6863      	ldr	r3, [r4, #4]
 80036c0:	6123      	str	r3, [r4, #16]
 80036c2:	2300      	movs	r3, #0
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	e7a8      	b.n	800361c <_printf_i+0x150>
 80036ca:	6923      	ldr	r3, [r4, #16]
 80036cc:	4632      	mov	r2, r6
 80036ce:	4649      	mov	r1, r9
 80036d0:	4640      	mov	r0, r8
 80036d2:	47d0      	blx	sl
 80036d4:	3001      	adds	r0, #1
 80036d6:	d0ab      	beq.n	8003630 <_printf_i+0x164>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	079b      	lsls	r3, r3, #30
 80036dc:	d413      	bmi.n	8003706 <_printf_i+0x23a>
 80036de:	68e0      	ldr	r0, [r4, #12]
 80036e0:	9b03      	ldr	r3, [sp, #12]
 80036e2:	4298      	cmp	r0, r3
 80036e4:	bfb8      	it	lt
 80036e6:	4618      	movlt	r0, r3
 80036e8:	e7a4      	b.n	8003634 <_printf_i+0x168>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4632      	mov	r2, r6
 80036ee:	4649      	mov	r1, r9
 80036f0:	4640      	mov	r0, r8
 80036f2:	47d0      	blx	sl
 80036f4:	3001      	adds	r0, #1
 80036f6:	d09b      	beq.n	8003630 <_printf_i+0x164>
 80036f8:	3501      	adds	r5, #1
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	9903      	ldr	r1, [sp, #12]
 80036fe:	1a5b      	subs	r3, r3, r1
 8003700:	42ab      	cmp	r3, r5
 8003702:	dcf2      	bgt.n	80036ea <_printf_i+0x21e>
 8003704:	e7eb      	b.n	80036de <_printf_i+0x212>
 8003706:	2500      	movs	r5, #0
 8003708:	f104 0619 	add.w	r6, r4, #25
 800370c:	e7f5      	b.n	80036fa <_printf_i+0x22e>
 800370e:	bf00      	nop
 8003710:	08003d7d 	.word	0x08003d7d
 8003714:	08003d8e 	.word	0x08003d8e

08003718 <memcpy>:
 8003718:	440a      	add	r2, r1
 800371a:	4291      	cmp	r1, r2
 800371c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003720:	d100      	bne.n	8003724 <memcpy+0xc>
 8003722:	4770      	bx	lr
 8003724:	b510      	push	{r4, lr}
 8003726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800372a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800372e:	4291      	cmp	r1, r2
 8003730:	d1f9      	bne.n	8003726 <memcpy+0xe>
 8003732:	bd10      	pop	{r4, pc}

08003734 <memmove>:
 8003734:	4288      	cmp	r0, r1
 8003736:	b510      	push	{r4, lr}
 8003738:	eb01 0402 	add.w	r4, r1, r2
 800373c:	d902      	bls.n	8003744 <memmove+0x10>
 800373e:	4284      	cmp	r4, r0
 8003740:	4623      	mov	r3, r4
 8003742:	d807      	bhi.n	8003754 <memmove+0x20>
 8003744:	1e43      	subs	r3, r0, #1
 8003746:	42a1      	cmp	r1, r4
 8003748:	d008      	beq.n	800375c <memmove+0x28>
 800374a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800374e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003752:	e7f8      	b.n	8003746 <memmove+0x12>
 8003754:	4402      	add	r2, r0
 8003756:	4601      	mov	r1, r0
 8003758:	428a      	cmp	r2, r1
 800375a:	d100      	bne.n	800375e <memmove+0x2a>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003766:	e7f7      	b.n	8003758 <memmove+0x24>

08003768 <_free_r>:
 8003768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800376a:	2900      	cmp	r1, #0
 800376c:	d048      	beq.n	8003800 <_free_r+0x98>
 800376e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003772:	9001      	str	r0, [sp, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f1a1 0404 	sub.w	r4, r1, #4
 800377a:	bfb8      	it	lt
 800377c:	18e4      	addlt	r4, r4, r3
 800377e:	f000 f8d3 	bl	8003928 <__malloc_lock>
 8003782:	4a20      	ldr	r2, [pc, #128]	; (8003804 <_free_r+0x9c>)
 8003784:	9801      	ldr	r0, [sp, #4]
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	4615      	mov	r5, r2
 800378a:	b933      	cbnz	r3, 800379a <_free_r+0x32>
 800378c:	6063      	str	r3, [r4, #4]
 800378e:	6014      	str	r4, [r2, #0]
 8003790:	b003      	add	sp, #12
 8003792:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003796:	f000 b8cd 	b.w	8003934 <__malloc_unlock>
 800379a:	42a3      	cmp	r3, r4
 800379c:	d90b      	bls.n	80037b6 <_free_r+0x4e>
 800379e:	6821      	ldr	r1, [r4, #0]
 80037a0:	1862      	adds	r2, r4, r1
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bf04      	itt	eq
 80037a6:	681a      	ldreq	r2, [r3, #0]
 80037a8:	685b      	ldreq	r3, [r3, #4]
 80037aa:	6063      	str	r3, [r4, #4]
 80037ac:	bf04      	itt	eq
 80037ae:	1852      	addeq	r2, r2, r1
 80037b0:	6022      	streq	r2, [r4, #0]
 80037b2:	602c      	str	r4, [r5, #0]
 80037b4:	e7ec      	b.n	8003790 <_free_r+0x28>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x58>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x4e>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1855      	adds	r5, r2, r1
 80037c4:	42a5      	cmp	r5, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x78>
 80037c8:	6824      	ldr	r4, [r4, #0]
 80037ca:	4421      	add	r1, r4
 80037cc:	1854      	adds	r4, r2, r1
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1dd      	bne.n	8003790 <_free_r+0x28>
 80037d4:	681c      	ldr	r4, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	4421      	add	r1, r4
 80037dc:	6011      	str	r1, [r2, #0]
 80037de:	e7d7      	b.n	8003790 <_free_r+0x28>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x80>
 80037e2:	230c      	movs	r3, #12
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	e7d3      	b.n	8003790 <_free_r+0x28>
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1961      	adds	r1, r4, r5
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf04      	itt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	bf04      	itt	eq
 80037f8:	1949      	addeq	r1, r1, r5
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6054      	str	r4, [r2, #4]
 80037fe:	e7c7      	b.n	8003790 <_free_r+0x28>
 8003800:	b003      	add	sp, #12
 8003802:	bd30      	pop	{r4, r5, pc}
 8003804:	20000098 	.word	0x20000098

08003808 <_malloc_r>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	1ccd      	adds	r5, r1, #3
 800380c:	f025 0503 	bic.w	r5, r5, #3
 8003810:	3508      	adds	r5, #8
 8003812:	2d0c      	cmp	r5, #12
 8003814:	bf38      	it	cc
 8003816:	250c      	movcc	r5, #12
 8003818:	2d00      	cmp	r5, #0
 800381a:	4606      	mov	r6, r0
 800381c:	db01      	blt.n	8003822 <_malloc_r+0x1a>
 800381e:	42a9      	cmp	r1, r5
 8003820:	d903      	bls.n	800382a <_malloc_r+0x22>
 8003822:	230c      	movs	r3, #12
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	2000      	movs	r0, #0
 8003828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382a:	f000 f87d 	bl	8003928 <__malloc_lock>
 800382e:	4921      	ldr	r1, [pc, #132]	; (80038b4 <_malloc_r+0xac>)
 8003830:	680a      	ldr	r2, [r1, #0]
 8003832:	4614      	mov	r4, r2
 8003834:	b99c      	cbnz	r4, 800385e <_malloc_r+0x56>
 8003836:	4f20      	ldr	r7, [pc, #128]	; (80038b8 <_malloc_r+0xb0>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b923      	cbnz	r3, 8003846 <_malloc_r+0x3e>
 800383c:	4621      	mov	r1, r4
 800383e:	4630      	mov	r0, r6
 8003840:	f000 f862 	bl	8003908 <_sbrk_r>
 8003844:	6038      	str	r0, [r7, #0]
 8003846:	4629      	mov	r1, r5
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f85d 	bl	8003908 <_sbrk_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	d123      	bne.n	800389a <_malloc_r+0x92>
 8003852:	230c      	movs	r3, #12
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f86c 	bl	8003934 <__malloc_unlock>
 800385c:	e7e3      	b.n	8003826 <_malloc_r+0x1e>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	1b5b      	subs	r3, r3, r5
 8003862:	d417      	bmi.n	8003894 <_malloc_r+0x8c>
 8003864:	2b0b      	cmp	r3, #11
 8003866:	d903      	bls.n	8003870 <_malloc_r+0x68>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	441c      	add	r4, r3
 800386c:	6025      	str	r5, [r4, #0]
 800386e:	e004      	b.n	800387a <_malloc_r+0x72>
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	42a2      	cmp	r2, r4
 8003874:	bf0c      	ite	eq
 8003876:	600b      	streq	r3, [r1, #0]
 8003878:	6053      	strne	r3, [r2, #4]
 800387a:	4630      	mov	r0, r6
 800387c:	f000 f85a 	bl	8003934 <__malloc_unlock>
 8003880:	f104 000b 	add.w	r0, r4, #11
 8003884:	1d23      	adds	r3, r4, #4
 8003886:	f020 0007 	bic.w	r0, r0, #7
 800388a:	1ac2      	subs	r2, r0, r3
 800388c:	d0cc      	beq.n	8003828 <_malloc_r+0x20>
 800388e:	1a1b      	subs	r3, r3, r0
 8003890:	50a3      	str	r3, [r4, r2]
 8003892:	e7c9      	b.n	8003828 <_malloc_r+0x20>
 8003894:	4622      	mov	r2, r4
 8003896:	6864      	ldr	r4, [r4, #4]
 8003898:	e7cc      	b.n	8003834 <_malloc_r+0x2c>
 800389a:	1cc4      	adds	r4, r0, #3
 800389c:	f024 0403 	bic.w	r4, r4, #3
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d0e3      	beq.n	800386c <_malloc_r+0x64>
 80038a4:	1a21      	subs	r1, r4, r0
 80038a6:	4630      	mov	r0, r6
 80038a8:	f000 f82e 	bl	8003908 <_sbrk_r>
 80038ac:	3001      	adds	r0, #1
 80038ae:	d1dd      	bne.n	800386c <_malloc_r+0x64>
 80038b0:	e7cf      	b.n	8003852 <_malloc_r+0x4a>
 80038b2:	bf00      	nop
 80038b4:	20000098 	.word	0x20000098
 80038b8:	2000009c 	.word	0x2000009c

080038bc <_realloc_r>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	4607      	mov	r7, r0
 80038c0:	4614      	mov	r4, r2
 80038c2:	460e      	mov	r6, r1
 80038c4:	b921      	cbnz	r1, 80038d0 <_realloc_r+0x14>
 80038c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038ca:	4611      	mov	r1, r2
 80038cc:	f7ff bf9c 	b.w	8003808 <_malloc_r>
 80038d0:	b922      	cbnz	r2, 80038dc <_realloc_r+0x20>
 80038d2:	f7ff ff49 	bl	8003768 <_free_r>
 80038d6:	4625      	mov	r5, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038dc:	f000 f830 	bl	8003940 <_malloc_usable_size_r>
 80038e0:	42a0      	cmp	r0, r4
 80038e2:	d20f      	bcs.n	8003904 <_realloc_r+0x48>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4638      	mov	r0, r7
 80038e8:	f7ff ff8e 	bl	8003808 <_malloc_r>
 80038ec:	4605      	mov	r5, r0
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d0f2      	beq.n	80038d8 <_realloc_r+0x1c>
 80038f2:	4631      	mov	r1, r6
 80038f4:	4622      	mov	r2, r4
 80038f6:	f7ff ff0f 	bl	8003718 <memcpy>
 80038fa:	4631      	mov	r1, r6
 80038fc:	4638      	mov	r0, r7
 80038fe:	f7ff ff33 	bl	8003768 <_free_r>
 8003902:	e7e9      	b.n	80038d8 <_realloc_r+0x1c>
 8003904:	4635      	mov	r5, r6
 8003906:	e7e7      	b.n	80038d8 <_realloc_r+0x1c>

08003908 <_sbrk_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4d06      	ldr	r5, [pc, #24]	; (8003924 <_sbrk_r+0x1c>)
 800390c:	2300      	movs	r3, #0
 800390e:	4604      	mov	r4, r0
 8003910:	4608      	mov	r0, r1
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	f7fd fca6 	bl	8001264 <_sbrk>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_sbrk_r+0x1a>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_sbrk_r+0x1a>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	200002a4 	.word	0x200002a4

08003928 <__malloc_lock>:
 8003928:	4801      	ldr	r0, [pc, #4]	; (8003930 <__malloc_lock+0x8>)
 800392a:	f000 b811 	b.w	8003950 <__retarget_lock_acquire_recursive>
 800392e:	bf00      	nop
 8003930:	200002ac 	.word	0x200002ac

08003934 <__malloc_unlock>:
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <__malloc_unlock+0x8>)
 8003936:	f000 b80c 	b.w	8003952 <__retarget_lock_release_recursive>
 800393a:	bf00      	nop
 800393c:	200002ac 	.word	0x200002ac

08003940 <_malloc_usable_size_r>:
 8003940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003944:	1f18      	subs	r0, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfbc      	itt	lt
 800394a:	580b      	ldrlt	r3, [r1, r0]
 800394c:	18c0      	addlt	r0, r0, r3
 800394e:	4770      	bx	lr

08003950 <__retarget_lock_acquire_recursive>:
 8003950:	4770      	bx	lr

08003952 <__retarget_lock_release_recursive>:
 8003952:	4770      	bx	lr

08003954 <_init>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr

08003960 <_fini>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr
